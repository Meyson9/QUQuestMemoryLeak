// // import modals from "./modules/modals";


// window.addEventListener('DOMContentLoaded', () => {
//   'use strict';
//   // console.log(modals);
//   console.log('!----+++');
//   const btnStart = document.querySelector('.startPage');

//   btnStart.addEventListener('click', () => {
//     document.querySelector('.wrapperTutle').classList.add('pps')
//     document.querySelector('.buttonHolder').classList.add('holeOut')
//     setTimeout(() => {
//       setTimeout(() => {

//         document.querySelector('.buttonHolder').classList.remove('hide')
//       }, 1000);
//       document.querySelector('.buttonHolder').classList.remove('holeOut')
//       document.querySelector('.buttonHolder').classList.add('hide')
//       document.querySelector('.buttonHolder').classList.add('buttonHolderStatic')

//       document.querySelector('.buttonHolder').classList.add('bord')
//       document.querySelector('.buttonHolder').classList.add('gridAct')
//     }, 300);

//   })

//   btnStart.addEventListener('click', () => {
//     setTimeout(() => {
//       // document.querySelector('.wrapperTutle').classList.remove('pps')

//       standardQuestions()
//     }, 3000);
//   })


//   // standardQuestions();
//   function standardQuestions() {
//     // document.querySelector('.wraperAllToll').classList.add('pps')

//     const object = {
//       1: ['Что такое тестирование?',
//         ' проверка соответствия между реальным и ожидаемым поведением.'
//       ],
//       2: ['В чем заключается цель тестирования?',
//         'Повысить вероятность того, что приложение:  будет соответствовать всем описанным требованиям.   будет работать правильно при любых обстоятельствах'
//       ],
//       3: ['Гарантирует ли тестирование отсутствие багов в продукте?',
//         'Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. _Тем не менее, важно составлять тест-кейсы, которые будут находить как можно больше багов. Таким образом, при должном тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов в программном обеспечении.', 'https://vc.ru/life/124461-principy-testirovaniya-primenenie-iskazheniya-i-illyuzii'
//       ],
//       4: ['расскажите что такое Тест план? И по какой струкутре вы его выстриваете?'],
//       5: ['В чем разница между багом и фичей?'],
//       6: ['Как протестировать без ТЗ и спецификации?'],
//       7: [
//         'Вы нашли баг, но разработчик говорит, что это фича. Что будете делать?'
//       ],
//       8: ['Как тестировщик может понять, что баг исправлен?'],
//       9: ['Из чего состоит процесс тестирования?'],
//       10: ['Что такое Качество ПО'],
//       11: ['На каких этапах разработки ПО может проходить тестирование?'],
//       12: ['Что такое тестовое покрытие?'],
//       13: [
//         'Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?'
//       ],
//       14: [
//         'Если нашли незначительную ошибку и рядом сидит разработчик и может ее быстро исправить, будете документировать или напрямую скажете разработчику исправь ее?'
//       ],
//       15: ['Когда стоит остановить тестирование?'],
//       16: ['Чем отличается Валидация от Верификации'],
//       17: ['Какие основнеы Уровни Тестирования вы знаете?'],
//       18: [''],
//       19: ['Чем отличается sanity от smoke тестирования?'],
//       20: [
//         'Какое тестирование проводят в первую очередь: негативное или позитивное?'
//       ],
//       21: [
//         'Чем отличается тестирование черного ящика от тестирования белого ящика?'
//       ],
//       22: ['Что такое тест-дизайн и для чего он нужен?'],
//       23: ['Какие виды тестирования знаете? Не путать с техниками/методами!'],
//       24: [''],
//       25: [' какие Принципы тестирования вызнаете ?'],
//       26: ['Чем отличается тест-кейс от баг-репорта?'],
//       27: [
//         'Есть ли отличия между приоритетом и значительностью бага или это одно и тоже?'
//       ],
//       28: [
//         'Какие основные поля содержит баг-репорт? Без чего баг-репорт уже не будет баг-репортом? Обращу внимание, что речь не о всех полях, а именно об основных'
//       ],
//       29: ['Чем отличается тест-кейс от чек-листа?'],
//       30: [
//         'Какие основные поля содержит тест-кейс/Без чего текст-кейсы уже не будет тест-кейсом? Обращу внимание, что речь не о всех полях, а именно об основных.'
//       ],
//       31: [
//         'Всегда ли нужны тест-кейсы? Обращу внимание, что тут нужно перечислить случае, в которых они не нужны.'
//       ],
//       32: [
//         'что такое Требования и по каким принцопам нужно проверять Требования ?'
//       ],
//       33: [
//         'Классы эквивалентности используются только вместе с граничными значениями или можно применить их отдельно?'
//       ],
//       34: ['У всех классов эквивалентности есть верхнее и нижнее значение?'],
//       35: ['раскажите про Жизненный цикл бага'],
//       36: [
//         'Как вы будете тестировать карандаш/чайник/чашку/лифт…? Обратите внимание, что чайник может быть как электрический, так и обычный. Помните про такие нюансы.'
//       ],
//       37: ['что такое тест кейс?'],
//       38: ['Что такое тестирование API?'],
//       39: ['Приведите примеры интеграции через API.'],
//       40: ['В чем разница между SOAP и REST? Вопрос по API.'],
//       41: ['Перечислите ключевые элементы HTTP-запроса.'],
//       42: ['Может ли у ПО быть сразу несколько баз данных?'],
//       43: ['Что такое реляционная база данных?'],
//       44: ['что такое баг репорт и какие основные пункты в баг репорте?'],
//       45: ['Всегда ли нужна автоматизация?'],
//       46: ['С какими методами/техниками тестирования вы знакомы?'],
//       47: ['чем отличаютсямежду собой дефект,эрор, Баг и сбой '],
//       48: ['Почему хотите сменить сферу деятельности?'],
//       49: ['Почему вы решили стать тестировщиком?'],
//       50: ['Почему хотите работать именно у нас?'],
//       51: ['Кем вы видите себя через 5 лет?'],
//       52: ['А у вас есть к нам какие-то вопросы?']
//     }
//     for (const key in object) {
//       const element = object[key];
//       if (Object.hasOwnProperty.call(object, key)) {
//         // console.log(key);
//         // console.log(key,element);
//         const div = document.createElement('div')
//         div.classList.add('tinRightIn')
//         div.innerHTML = `
//   <div class="wrapper quetion${key} ${'quetion'+key === 'quetion1'? 'q':'hide' } ">
//     <form action="#">
//       <div class="row">
//         <div class="quesion">
//           <p id="textQuesion">${element[0]}</p> 
//         </div>
//         <div class="wrap-button">
//           <!-- <p id="textQuesion">Enter Text</p>  -->
           
//            <audio controls class="audio">
//             <source src="assets/img/Aleksandra.wav" type="audio/wav">
//             <source src="assets/img/Aleksandra.wav" type="audio/wav">
//             <p>Your browser doesn't support HTML5 audio. Here is a 
//             <a href="viper.mp3">link to the audio</a> instead.</p>
//           </audio>
//           <button class="btn-remove btn btn-remove${key}">
//           <img class="icon" src="assets/img/cors.png" alt="remove">
//           </button>
//           <button class="btn-remove btn start-stop start-stop${key}">
//           <img class="icon" id="voisIconi${key}" src="assets/img/micro.png" alt="vois">
          
//           </button>
//           <button class="btn-remove btn pause pause${key}">
//           <img class="icon" src="assets/img/mute.png" alt="stop">
          
//           </button>
//         </div>
//         <textarea class="lasss lasss${key}" value=""></textarea>
    
//       </div>
    
//     </form> 
//     <!-- .wrapper -->
//     <div class="respons">
//     <button id="btnResp${key}" class="accordion">Ответ</button>
//      <div class="panel">
//         <p>${element[1]? matchSearch(element[1]):'ответа пока нет'}</p>
//     </div>
//     </div>

//   </div>
  
//   `
//         //  <p  style="text-align: center;" >Ответ</p>
//         //  document.querySelector('.quetion1').classList.remove('hide')

//         document.querySelector('.wrapperPagestart').append(div)
//         setTimeout(() => {

//           app('.start-stop' + key,
//             '.pause' + key,
//             '.btn-remove' + key,
//             '.lasss' + key,
//             'assets/img/testing.mp3',
//             'question' + key,
//             '#btnResp' + key,
//             '#voisIconi' + key)
//           if (localStorage.getItem('question' + key) !== null) {
//             // …то отображаем его содержимое в нашем редакторе
//             let local = localStorage.getItem('question' + key),
//               cor = `${local}`
//             localStorage.setItem('question' + key, chech(local));
//             document.querySelector('.lasss' + key).value = cor;
//           }
//           // quetionAdd(`quetion${key}`)
//         }, 1000);

//       }

//     }

//   }
//   // hide
//   const button = document.querySelector('.stateBtn');
//   button.addEventListener('click', (e) => {
//     quetionAdd(e)
//   })

//   // console.log(this.hash);
//   function quetionAdd(e) {
//     const body = document.querySelector('body');
//     console.log('!!!!!!!');
//     //   console.log(e.hash);
//     const listAll = document.querySelectorAll('.wrapper')
//     const li = document.querySelector('.wrapperTutle')
//     // console.log(listAll);
//     for (const iterator of listAll) {
//       console.log(iterator);
//       if (iterator.classList.contains('hide') && iterator.classList.contains('quetion1') !== 'quetion1') {
//         li.classList.add('relev')
//         iterator.classList.remove('hide')
//         setTimeout(() => {
//           // animScrollTo(iterator,100, 6000)
//           // iterator.scrollIntoView()
//           iterator.scrollIntoView({
//             block: "center",
//             behavior: "smooth"
//           })
//         }, 1200);
//         body.style.height = body.offsetHeight + 350 + "px"
//         break;
//       }
//     }

//   }





//   // const div = document.createElement('div')
//   //       div.innerHTML = `
//   //       <div class="wrapper">
//   //         <form action="#">
//   //           <div class="row">
//   //             <div class="quesion">
//   //               <p id="textQuesion">Enter Text</p> 
//   //             </div>
//   //             <div class="wrap-button">
//   //               <!-- <p id="textQuesion">Enter Text</p>  -->

//   //                <audio controls class="audio">
//   //                 <source src="Aleksandra.wav" type="audio/wav">
//   //                 <source src="Aleksandra.wav" type="audio/wav">
//   //                 <p>Your browser doesn't support HTML5 audio. Here is a <a href="viper.mp3">link to the audio</a> instead.</p>
//   //               </audio>
//   //               <button class="btn-remove">Remove</button>
//   //               <button class="btn-remove btn start-stop start">Strat</button>
//   //               <button class="btn-remove pause">Stop</button>
//   //             </div>
//   //             <textarea class="lasss" value=""></textarea>

//   //           </div>

//   //         </form>
//   //         <!-- .wrapper -->
//   //       </div>

//   //       `
//   function app(selStart, selStop, selRemove, selTextare, selPahtVoid, selLocal, selBtnResp, selVoisIcPuls) {
//     const recognizer = new webkitSpeechRecognition();

//     // Ставим опцию, чтобы распознавание началось ещё до того, как пользователь закончит говорить
//     recognizer.interimResults = true;

//     // Какой язык будем распознавать?
//     recognizer.lang = 'ru-Ru';


//     const letstartStop = document.querySelector(selStart)
//     const letstop = document.querySelector(selStop)
//     const remove = document.querySelector(selRemove)
//     const textare = document.querySelector(selTextare)
//     const btnResp = document.querySelector(selBtnResp)
//     let resal = true

//     btnResp.addEventListener('click', function (e) {
//       e.preventDefault();
//       this.classList.toggle("active");
//       let panel = this.nextElementSibling;
//       if (panel.style.maxHeight) {
//         panel.style.maxHeight = null;
//       } else {
//         panel.style.maxHeight = panel.scrollHeight + "px";
//       }
//     })
//     remove.addEventListener('click', (e) => {
//       e.preventDefault()
//       console.log(e);
//       let target = null
//       if (e.target.localName === "button") {
//         target = e.target.parentNode.nextElementSibling
//       } else {
//         target = e.target.parentNode.parentNode.nextElementSibling
//       }
//       target.value = ''
//       target.innerHTML = ''
//       localStorage.setItem(selLocal, '');
//     })
//     // console.log(letstartStop);

//     recognizer.onend = () => {
//       console.log("Распознавание голоса закончено" + selStart);
//       multiPlepresButtons(false, selStart)

//       if (!resal) return;
//       recognizer.start();
//     };

//     recognizer.onstart = () => {
//       console.log("Распознавание голоса запущено" + selStart);
//       multiPlepresButtons(true, selStart)
//     };

//     recognizer.onerror = ({
//       error
//     }) => {
//       console.error(error);
//     };

//     var audio = new Audio();
//     audio.preload = 'auto';
//     audio.src = `./${selPahtVoid}`;
//     // audio.play();


//     letstartStop.addEventListener('click', (event) => {
//       event.preventDefault()
//       console.log(`a em ${selStart} heer `);
//       resal = true
//       let target = null
//       if (event.srcElement.nodeName === "IMG") {
//         target = event.srcElement.offsetParent.parentElement.nextElementSibling
//       } else {
//         target = event.target.parentElement.nextElementSibling
//       }
//       document.querySelector(selVoisIcPuls).classList.add('iconActive')

//       recognizer.start();
//       recognizer.onresult = function (event) {
//         var result = event.results[event.resultIndex];
//         if (result.isFinal) {
//           console.log('Вы сказали в тоге: ' + result[0].transcript);
//           // document.querySelector('.lasss').innerText =  result[0].transcript
//           // target.innerText =  result[0].transcript
//           if (localStorage.getItem(selLocal) !== null) {
//             // …то отображаем его содержимое в нашем редакторе
//             let local = localStorage.getItem(selLocal),
//               cor = `${local} ${result[0].transcript}`
//             localStorage.setItem(selLocal, chech(cor));
//             target.value = [chech(cor.trim())];
//           } else {
//             let local = localStorage.getItem(selLocal),
//               cor = `${local} ${result[0].transcript}`
//             target.innerText = chech(cor.trim())
//             localStorage.setItem(selLocal, chech(cor.trim()));
//           }
//         } else {
//           // target.innerText =  result[0].transcript
//           console.log('Промежуточный результат: ', result[0].transcript);
//           if (localStorage.getItem(selLocal) !== null) {
//             // …то отображаем его содержимое в нашем редакторе

//             let local = localStorage.getItem(selLocal),
//               cor = `${local} ${result[0].transcript}`;
//             target.value = chech(cor.trim());
//           } else {

//             let local = localStorage.getItem(selLocal),
//               cor = `${local} ${result[0].transcript}`
//             target.value = chech(cor.trim())
//             // localStorage.setItem('question', result[0].transcript);
//           }

//         }
//       };


//       // if (letstartStop.classList.contains('stop')){
//       //   console.log('нету');
//       //   setTimeout(() => {
//       //     letstartStop.classList.remove('stop')
//       //     letstartStop.classList.add('start')
//       //   }, 2000);
//       //   recognizer.stop();
//       // }
//     })

//     letstop.addEventListener('click', (event) => {
//       event.preventDefault()
//       if (event.target.localName === "button") {
//         event.target.parentNode.children[2].children[0].classList.remove('iconActive');

//       } else {
//         if (event.srcElement.offsetParent.form[1].children[0].attributes[0].ownerElement.className.slice(5) === 'iconActive') {
//           event.srcElement.offsetParent.form[1].children[0].attributes[0].ownerElement.classList.remove('iconActive')
//         }
//       }
//       // console.dir(event.srcElement.offsetParent.form[1].children[0].attributes[0].ownerElement.className);
//       console.log(' recognition.stop();');
//       letstartStop.classList.add('start')
//       resal = false
//       recognizer.abort();
//     })


//     textare.addEventListener('input', function (event) {
//       event.preventDefault()
//       console.log('keypress');
//       // let text = document.querySelector('.lasss')
//       console.log(textare.value);
//       localStorage.setItem(selLocal, chech(textare.value));
//     });

//   }

//   upWindowuser()

//   function upWindowuser() {
//     const div = document.createElement('div')
//     div.classList.add('upButton')
//     div.innerHTML = `<a style="display: block;" src="" href=""><img src="assets/img/Up.png" alt=""></a>`
//     div.classList.add('hide')
//     document.addEventListener('scroll', (e) => {

//       const userwiz = window.pageYOffset
//       if (userwiz > 1200) {
//         div.classList.remove('hide')
//       } else {
//         div.classList.add('hide')
//       }

//     })
//     document.querySelector('.staet').append(div)
//     div.addEventListener('click', (e) => {
//       e.preventDefault()
//       document.querySelector('.wrapperTutle').scrollIntoView({
//         block: "center",
//         behavior: "smooth"
//       })

//     })
//   }

//   function replaceAt(text, index, replacement) {
//     return text.substring(0, index) + replacement + text.substring(index + 1, +text.length);
//   }

//   // console.log('~какя_Приве_'.replaceAt(5, '<Br'));

//   // matchSearch('~какя_Приве_')
//   function matchSearch(text) {
//     let p = text
//     for (let i = 0; i < p.length; i++) {
//       const element = p[i];
//       // console.log(element);
//       if (element === '_') {
//         p = replaceAt(p, i, '<br>')
//       }
//       // console.log(p);
//       if (element === '~') {
//         p = replaceAt(p, i, '<br>')
//       }
//     }
//     return p
//   }

//   function todoOPen(params) {
//     const btnStart = document.querySelector('.startPage');

//   }


//   // console.log(matchSearch(arrayHead, strHead, 1)); 
//   function multiPlepresButtons(disable = true, selectorActivBtn) {
//     const button = document.querySelector(selectorActivBtn),
//       allButton = document.querySelectorAll('.start-stop');
//     // console.log(button);
//     if (disable) {

//       allButton.forEach((item) => {

//         item.setAttribute('disabled', true)
//         // console.log(item);
//         if (item == button) {
//           //   console.log('true item == button');
//         } else {
//           item.classList.add('btnDeactiv')
//         }
//       })
//     } else {
//       allButton.forEach((item) => {
//         item.classList.remove('btnDeactiv')

//         item.removeAttribute('disabled')
//       })
//       console.log('sels');
//     }

//   }

//   function chech(text) {
//     if (text.at(0) === ',') {
//       return text.slice(1);
//     } else if (text.at(0) === 'n' && text.at(1) === 'u' && text.at(2) === 'l' && text.at(3) === 'l') {
//       console.log("hello");
//       return text.slice(5)
//     } else {
//       return text
//     }
//   }


// });


// let text = `[
//   [
//     'Что такое тестирование?',
//     ' проверка соответствия между реальным и ожидаемым поведением.',
//     'assets/voise/0qUs1.mp3'
//   ],
//   [
//     'В чем заключается цель тестирования?',
//     'Повысить вероятность того, что приложение, предназначенное для тестирования, будет работать правильно при любых обстоятельствах. _Повысить вероятность того, что приложение, будет соответствовать всем описанным требованиям. _Предоставление актуальной информации о состоянии продукта на данный момент.',
//     'assets/voise/0qUs2.mp3'
//   ],
//   [
//     'Гарантирует ли тестирование отсутствие багов в продукте?',
//     'Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. _Тем не менее, важно составлять тест-кейсы, которые будут находить как можно больше багов. Таким образом, при должном тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов в программном обеспечении.',
//     'assets/voise/0qUs3.mp3',
//     'https://vc.ru/life/124461-principy-testirovaniya-primenenie-iskazheniya-i-illyuzii'
//   ],
//   [
//     'Расскажите что такое Тест план? И по какой струкутре вы его выстриваете?',
//     'это документ, описывающий весь объем работ по тестированию _Отвечает на вопросы: _ •  Что мы тестируем? _• Когда? _ •  Критерии начала / окончания тестирования. _• Окружение(environment) dev/staging/production? _ • Подходы/техники/инструменты/виды тестирования? _• Браузеры/версии/OS/разрешения экрана? _• Кто? Обязанности? Ресурсы? Обучение? _• Сроки? _• График? _• Стратегия тестирования. _•  Ссылки на документацию. ',
//     'assets/voise/0qUs4.mp3'
//   ],
//   [
//     'В чем разница между багом и фичей?',
//     'Фичей  называют дополнительную, специально придуманную (и, возможно, неочевидную) опцию программы. «багом» можно назвать любой сбой в работе ПО',
//     'assets/voise/0qUs5.mp3'
//   ],
//   [
//     'Как протестировать без ТЗ и спецификации?',
//     'Информация разниться в разных источниках!  _Возможно ли тестировать без требований? где-то указывают что нет! Потому что именно они определяют, что должен представлять собой тот или иной продукт, и без них он фактически не может быть создан! _    но а как же Ad-hoc testing который не подразумевает никакой подготовки или планирования, здесь нет тестовых сценариев, как и какого-либо ожидания от результата. _ _Нет нужды разрабатывать и придерживаться какого-либо плана, или вести документацию, нет никаких тест-кейсов (правда, от этого могут возникнуть трудности с тем, чтобы воспроизвести ошибку – никаких планов и документов то нет)_   _Преимущества ad-hoc testing _      • Все работает максимально быстро, нет надобности выполнять подготовку. _      • Основные и самые критичные баги находятся сразу же. _      • Новый тестер с таким подходом сможет легко и быстро освоить основные моменты, гораздо быстрее, чем в случае тест-кейсов.   _   Недостатки _ _      • Нет системного подхода, а значит вероятность обнаружения багов ниже, чем при спланированном подходе. _      • Нет системного подхода, а значит вероятность обнаружения багов ниже, чем при спланированном подходе. _      • Очень сложно воспроизвести условия возникновения бага. _      • Обязательно нужны общие знания о продукте, без них такое тестирование невозможно. _ • Сложно планировать ресурсы для тестирования, ведь непонятно, сколько времени и людей нужно, чтобы провести тесты. _ _Однако в любом случае необходимо понимать, кто будет пользоваться продуктом, как он должен выглядеть, из чего состоять и какими обладать функциями. Несмотря на то что эта информация не содержится в спецификациях, в ней как раз и заключены требования к ПО._ _Их источником служат не составленные по всей форме документы, а знания вашей команды, имеющиеся у заказчика представления, короткие разговоры за обедом, общепринятая практика, нормативно-правовые акты, то есть всё то, что порождает так называемые неявные требования ',
//     'assets/voise/0qUs6.mp3'
//   ],
//   [
//     'Вы нашли баг, но разработчик говорит, что это фича. Что будете делать?',
//     'Изначально перед отправкой баг-репорта стоит его обогатить скриншотами, логами или видео для избежания ситуации ответов от разраба <у меня все работает!> _В дальнейшем при дискуссии стоит проанализировать данные, на которые опирается разработчик, уточнить об актуальности данной информации и дальше выстроить диалог, основываясь от полученной информации.',
//     'assets/voise/0qUs7.mp3'
//   ],
//   [
//     'Что такое неявные требования?',
//     'Информацию о необходимом поведении, внешнем виде и свойствах системы, не внесенную в ТЗ и спецификации, а также не включенную в постановку задач, относят к неявным требованиям. Они могут проистекать из незадокументированных запросов от заказчика, законодательных актов и стандартов, устных договоренностей между членами команды разработчиков и даже их личного профессионального опыта. _ _      В число инструментов, призванных дополнить и структурировать существующую информацию о программном продукте, входит реестр неявных требований. Он представляет собой список всех связанных с системой фактов и ограничений, которые по какой-то причине не собраны в спецификацию.  __    Этот инструмент пригодится не только в тех случаях, когда техническая документация полностью отсутствует, но и в качестве дополнительного источника информации при наличии спецификаций. _     Такой документ создается в три этапа, подразумевающих формирование следующих перечней: _    • Реестр потенциальных источников неявных требований. _    • Реестр источников неявных требований к проекту. _    • Реестр неявных требований.',
//     'assets/voise/0qUs8.mp3',
//     'https://software-testing.ru/library/around-testing/requirements/3567-requirements'
//   ],
//   [
//     'Из чего состоит процесс тестирования?',
//     ' 1) Анализ продукта _ 2) Работа с требованиями _ 3) Разработка тест-плана _ 4) Создание тестовой документации _5) Тестирование прототипа _ 6) Основное тестирование _7) Стабилизация _ 8) Эксплуатация',
//     'assets/voise/0qUs9.mp3'
//   ],
//   [
//     'Что такое Качество ПО',
//     'Это совокупность характеристик программного обеспечения, относящихся к его способности удовлетворять установленные и предполагаемые потребности.',
//     'assets/voise/0qUs10.mp3'
//   ],
//   [
//     'На каких этапах разработки ПО может проходить тестирование?',
//     'В жизненном цикле ПО процесс тестирования в основном стоит за этапом разработки, перед эксплуатацией продукта пользователями. _ _Но все зависит от модели разработки и подходов к тестрованию, есть подход left shift test (Тестирование со сдвигом влево) — это подход при котором тестирование выполняется на более ранних этапах жизненного цикла.',
//     'assets/voise/0qUs11.mp3'
//   ],
//   [
//     'Что такое тестовое покрытие?',
//     'Тестовое покрытие — это плотность покрытия тестами выполняемого ПО или требований к нему. _Чем больше проверок будет создано, тем высшего уровня достигнет тестовое покрытие на любом проекте, стоит еще учитываь о качестве данных проверок. _ _Но, стоит понимать, что до полного покрытия дойти не выйдет, поскольку протестировать все 100% никогда не получится! _Оценка тестового покрытия содержит сразу несколько методологических подходов, а именно: _     • Покрытие требований; _    • Покрытие программного кода; ',
//     'assets/voise/0qUs12.mp3',
//     'https://testmatick.com/ru/ponyatie-testovogo-pokrytiya/'
//   ],
//   [
//     'Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?',
//     'во многих источниках указанно что нужно опираться на несколько показателей _ _ • Все 100% требований учтены. _  • Ожидаемое число дефектов обнаружено. _  •  Все дефекты, относящиеся к классу Show Stopper или Blocker, устранены, ни у одного из критических дефектов нет статуса «открытый». _   • Все дефекты с высоким приоритетом идентифицированы и исправлены. _   • Defect Rate (скорость дефектообразования) ниже установленного допустимого уровня. _  • Очень небольшое число дефектов среднего уровня критичности «открыты», их разбор проведен. _  • Число «открытых» дефектов среднего уровня, которые не влияют на пользование системой, очень небольшое. _   • Все дефекты с высоким уровнем приоритета закрыты и соответствующие регрессивные сценарии успешно проведены. _ _ Самый лучшиий вариант это построить матрицу соответствия требований, можно в виде таблицы или чек листа в котором можно отследить стадию завершения тесирования! _Самые частые критерии это _   _ • Время — В ходе тестирования могут находиться баги с разным приоритетом серьезности, попадаются баги блокеры, которые блокируют дальнейшее прохождение по тест кейсам, время на исправление и перепроверку багов может затянуться. _  _ • Бюджет — очень популярно на биржах фриланса, когда оплачиваются найденные баги в зависимости от количества и серьезности или оплачивается по количеству пройденных тест кейсов, также выделяется бюджет на написание самих тесткейсов. _  _  • Все тест кейсы пройдены, найденные баги исправлены и перепроверены — Для того чтобы протестировать приложение, тестировщик для начала должен ознакомиться с требованиями, функциональными спецификациями к приложению, если они конечно есть, или узнать со слов заказчика какое поведение должно быть при разных сценариях использования приложения или фитчи.',
//     'assets/voise/0qUs13.mp3'
//   ],
//   [
//     'Если нашли незначительную ошибку и рядом сидит разработчик и может ее быстро исправить, будете документировать или напрямую скажете разработчику исправь ее?',
//     'Ошибку лучше зафиксировать в баг-трекинговой системе для дальнейшего отслеживания! _ При необхадимости информацию о данной ошибке при исправлении которой может сломаться другой функционал найдут и выстроят правиьную цепочку собыитий',
//     'assets/voise/0qUs14.mp3'
//   ],
//   [
//     'Что такое спецификация ПО?',
//     'Спецификация (specifications) — это технический документ, который описывает функции и поведение приложения._ _Помогает получить четкое представление о продукте для его разработки и минимизировать сбои программного обеспечения _Спецификация — это документ с проанализированными требованиями',
//     'assets/voise/0qUs15.mp3',
//     'https://raznisa.ru/raznica-mezhdu-trebovaniyami-i-specifikaciej-v-razrabotke-programmnogo-obespecheniya/'
//   ],
//   [
//     'Чем отличается Валидация от Верификации',
//     'Верификация (verification)— оценка соответствия продукта требованиям (спецификации). _Отвечает на вопрос: “Система работает в соответствии с требованиями?”__Валидация (validation)— оценка соответствия продукта ожиданиям и требованиям пользователей. _Отвечает на вопрос: “Требования удовлетворяют ожидания пользователя?”',
//     'assets/voise/0qUs16.mp3'
//   ],
//   [
//     'Какие основные Уровни Тестирования вы знаете?',
//     '1. Модульное тестирование (Unit Testing) Тестирование объектов, классов, функций и т.д., обычно выполняемое программистами. _ _2. Интеграционное тестирование (Integration Testing)- Тестирование взаимодействия между классами, функциями, модулями. Например интеграция система оплаты проезда в метро с помощью банковской карты._ _3. Системное тестирование (System Testing) - Проверка как функциональных, так и не функциональных требований в системе._ _4. Приемочное тестирование (Acceptance Testing)Проверка соответствия системы требованиям и проводится с целью определения: _ удовлетворяет ли система приемочным критериям; _в итоге приниматеся решения заказчиком или менеджером принимать приложение или нет.',
//     'assets/voise/0qUs17.mp3'
//   ],
//   [
//     'что такое Операционное тестирование',
//     'Даже если система удовлетворяет всем требованиям, важно убедиться в том, что она удовлетворяет нуждам пользователя и выполняет свою роль в среде своей эксплуатации, как это было определено в бизнес моделе системы. __Следует учесть, что и бизнес модель может содержать ошибки. Поэтому так важно провести операционное тестирование как финальный шаг валидации. __ Кроме этого, тестирование в среде эксплуатации позволяет выявить и нефункциональные проблемы, такие как: конфликт с другими системами, смежными в области бизнеса или в программных и электронных окружениях; недостаточная производительность системы в среде эксплуатации и др. __ Очевидно, что нахождение подобных вещей на стадии внедрения — критичная и дорогостоящая проблема. Поэтому так важно проведение не только верификации, но и валидации, с самых ранних этапов разработки ПО.',
//     'assets/voise/0qUs18.mp3'
//   ],
//   [
//     'Чем отличается sanity от smoke тестирования?',
//     'В отличии от дымового (Smoke testing), санитарное тестирование (Sanity testing) направлено вглубь проверяемой функции, в то время как дымовое направлено вширь, для покрытия тестами как можно большего функционала в кратчайшие сроки.',
//     'assets/voise/0qUs19.mp3'
//   ],
//   [
//     'Как тестировщик может понять, что баг исправлен?',
//     'пройти тест кейс повторно, сделать retest',
//     'assets/voise/0qUs20.mp3'
//   ],
//   [
//     'Чем отличается тестирование черного ящика от тестирования белого ящика?',
//     'В тестировании черного ящика мы находимся в тех же условиях что и пользователи, не имея документации или любой другой информации как часть команд разработки, в тестировании белого ящика у нас есть доступ ко всем возможным аспектам и ветвя разработки ПО',
//     'assets/voise/0qUs21.mp3'
//   ],
//   [
//     'Что такое тест-дизайн и для чего он нужен?',
//     'Это этап процесса тестирования ПО, на котором проектируются и создаются тестовые случаи (тест кейсы), в соответствии с определёнными ранее критериями качества и целями тестирования. Роли, ответственные за тест дизайн: • Тест аналитик — определяет «ЧТО тестировать?» • Тест дизайнер — определяет «КАК тестировать?»',
//     'assets/voise/0qUs22.mp3'
//   ],
//   [
//     'Что такое обеспечение качества (QA) и Что такое контроль качества (QC)?!',
//     'Контроль качества (Quality Control) – это совокупность действий, проводимых над продуктом в процессе разработки, для получения информации о его актуальном состоянии в разрезах: «готовность продукта к выпуску», «соответствие зафиксированным требованиям», «соответствие заявленному уровню качества продукта». _Обеспечение качества (Quality Assurance) - это совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и эксплуатации программного обеспечения (ПО) информационных систем, предпринимаемых на разных стадиях жизненного цикла ПО, для обеспечения требуемого уровня качества выпускаемого продукта.    ',
//     'assets/voise/0qUs23.mp3'
//   ],
//   [
//     'Что такое модель зрелости тестирования',
//     'TMM основан на модели зрелости возможностей (CMM — Capability Maturity Model). Это подробная модель для улучшения процесса тестирования. Она может быть дополнена любой моделью улучшения процесса или может использоваться как одиночная модель. Модель ТММ имеет два основных компонента: _ _Набор из 5 уровней, которые определяют возможности тестирования (testing capability) Модель оценки (An Assessment Model) Пять уровней TMM помогают организации определить зрелость своего процесса и определить следующие шаги по улучшению, которые необходимы для достижения более высокого уровня зрелости тестирования. _ _Уровень 1. Начальный. ПО должно успешно работать На этом уровне области процессов не определены Цель тестирования — убедиться, что ПО работает нормальноНа этом уровне не хватает ресурсов, инструментов и обученного персонала.Нет проверки качества перед поставкой ПО _ _Уровень 2. Определенный. Разработка целей и политик тестирования и отладки.Этот уровень отличает тестирование от отладки, и они считаются различными действиями Этап тестирования наступает после кодирования Основная цель тестирования — показать, что ПО соответствует спецификации.Основные методы и методики тестирования _ _Уровень 3: Комплексный. Интеграция тестирования в жизненный цикл ПО. Тестирование интегрируется в весь жизненный цикл. На основании требований определяются цели испытаний Структура тестирования существует Тестирование на уровне профессиональной деятельности _ _Уровень 4: Управление и измерение. Создание программы тестовых измерений. Тестирование — это измеренный и количественный процесс Проверка на всех этапах разработки признается как тестирование Для повторного использования и регрессионного тестирования есть Test case и они записаны в базу тестов. Дефекты регистрируются и получают уровни серьезности _ _Уровень 5: Оптимизированный. Оптимизация процесса тестирования.Тестирование управляется и определено Эффективность и стоимость тестирования можно отслеживать Тестирование может постоянно настраиваться и улучшаться Практика контроля качества и предотвращения дефектов Практикуется процесс повторного использования (Reuse) Метрики, связанные с тестированием, также имеют средства поддержки Инструменты обеспечивают поддержку разработки тестовых наборов и сбора дефектов',
//     'assets/voise/0qUs24.mp3'
//   ],
//   [
//     'Какие Принципы тестирования вы знаете ?',
//     '1. Тестирование демонстрирует наличие дефектов: _ _Тестирование может показать, что дефекты присутствуют, но не может доказать, что их нет _ _2. Исчерпывающее тестирование недостижимо: _Полное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением тривиальных случаев._ _3. Раннее тестирование: _Чтобы найти дефекты как можно раньше, активности по тестированию должны быть начаты как можно раньше в жизненном цикле разработки. _ _4. Скопление дефектов: _Как правило, большая часть дефектов, обнаруженных при тестировании, содержится в небольшом количестве модулей. _ _5. Парадокс пестицида: _Если одни и те же тесты будут прогоняться много раз, в конечном счете этот набор тестовых сценариев больше не будет находить новых дефектов. _ _6. Тестирование зависит от контекста: _Тестирование выполняется по-разному в зависимости от контекста. _ _7. Заблуждение об отсутствии ошибок: _Обнаружение и исправление дефектов не помогут, если созданная система не подходит пользователю и не удовлетворяет его ожиданиям и потребностям.',
//     'assets/voise/0qUs25.mp3'
//   ],
//   [
//     'Чем отличается тест-кейс от баг-репорта?',
//     'В баг репорте пишется фактический результат а в тест кейсе нет!',
//     'assets/voise/0qUs26.mp3'
//   ],
//   [
//     'расскажите про градацию Severity (Серьезность)?',
//     ' • Блокирующая (Blocker) - Блокирующая ошибка, приводящая приложение в нерабочее состояние, в результате которого дальнейшая работа с тестируемой системой или ее ключевыми функциями становится невозможна. Решение проблемы необходимо для дальнейшего функционирования системы. _ _• Критическая (Critical) -Критическая ошибка, неправильно работающая ключевая бизнес логика, дыра в системе безопасности, проблема, приведшая к временному падению сервера или приводящая в нерабочее состояние некоторую часть системы, без возможности решения проблемы, используя другие входные точки. __ • Значительная (Major) -Значительная ошибка, часть основной бизнес логики работает некорректно. Ошибка не критична или есть возможность для работы с тестируемой функцией, используя другие входные точки. __ • Незначительная (Minor) - Незначительная ошибка, не нарушающая бизнес логику тестируемой части приложения, очевидная проблема пользовательского интерфейса. _ _• Тривиальная (Trivial) - Тривиальная ошибка, не касающаяся бизнес логики приложения, плохо воспроизводимая проблема, малозаметная посредствам пользовательского интерфейса, проблема сторонних библиотек или сервисов, проблема, не оказывающая никакого влияния на общее качество продукта.',
//     'assets/voise/0qUs27.mp3'
//   ],
//   [
//     'что такое Фокус-тест',
//     'Тестирование, проводимое с целью получения первичной реакции игроков. Необходимо для оценки удобства использования и того, как продукт принимается целевой аудиторией или сторонними людьми.',
//     'assets/voise/0qUs28.mp3'
//   ],
//   [
//     'Чем отличается тест-кейс от чек-листа?',
//     'Если коротко, то Чек- лист — это просто список того, что нужно проверить. __Не коротко Тест-кейс — подборный план того, как именно мы будем это проверять, чек-лист это документ, описывающий что должно быть протестировано. _При этом чек-лист может быть абсолютно разного уровня детализации. __На сколько детальным будет чек-лист зависит от требований к отчетности, уровня знания продукта сотрудниками и сложности продукта. Чек-лист менее формализован чем тест-кейс. .',
//     'assets/voise/0qUs29.mp3'
//   ],
//   [
//     'дайте определения тест-кейса! Какие основные поля содержит тест-кейс? Без чего текст-кейсы уже не будет тест-кейсом? речь об основных полях .',
//     'Test Case — это документ, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки тестируемой функции. _ _Тест кейс состоит из: _ID (идентификатор) _Title (название) _Type (тип) _Priority (приоритет) _Preconditions (предусловия) _Steps (шаги) _Expected Result (ожидаемый результат) _Post conditions (пост условия) - например очистка данных или возвращение системы в первоначальное состояние. _ Тест кейс без шагов и заголовка уже не тест-кейс',
//     'assets/voise/0qUs30.mp3'
//   ],
//   [
//     'Всегда ли нужны тест-кейсы? Обращу внимание, что тут нужно перечислить случае, в которых они не нужны.',
//     'Обычно при работе с простыми системами — сайтами, мобильными приложениями и т. д. — нет необходимости в тест-кейсах. _ Часто в команде бывает только один-два тестировщика, которые хорошо знают свой продукт. В таком случае время, потраченное на создание и поддержку тест-кейсов, никогда не окупится. Лучше создать чеклист со списком функций, которые нужно проверить — это будет более рационально.',
//     'assets/voise/0qUs31.mp3'
//   ],
//   [
//     'что такое Требования и по каким принципам нужно проверять Требования ?',
//     '  Требования - это спецификация (описание) того, что должно быть реализовано. _Требования описывают то, что необходимо реализовать, без детализации технической стороны решения. Что, а не как. _ _Требования к требованиям: _1) Корректность _2) Недвусмысленность _3) Полнота _4) Непротиворечивость _5) Упорядоченность по важности и стабильности _6) Проверяемость (тестопригодность) _7) Модифицируемость _8)  Трассируемость _9) Понимаемость',
//     'assets/voise/0qUs32.mp3'
//   ],
//   [
//     'Классы эквивалентности используются только вместе с граничными значениями или можно применить их отдельно?',
//     'Бывают ситуаци когда с классом эквивалентности нельзя применить граничные значение _ _Пример: есть опции у машин:  _<зимнего пакета>_   Подогрев сидений. _   Подогрев руля. _    Подогрев лобового и заднего стекла. _    Подогрев форсунок стеклоомывателя _    Подогрев боковых зеркал. _ _<электронные помощники> _Парктроник _Передние и задние датчики системы ParkPilot _контроль слепых зон _ и т.д. _Это две классы эквивалентности но о каких граничных значениях может итди речь ? Пример придумал я по этому :3',
//     'assets/voise/0qUs33.mp3'
//   ],
//   [
//     'Тебе пришла задача в тестирование. Как будешь оценивать время на проверку?',
//     'Слишком размытая формулировака есть только перечень действий для такой ситауции отталкиваться от количества тестовых сценариев.Я предпочитаю рассчитывать именно так.__1) Оцениваем объемы задачи. _ _2) Прикидываем примерное количество-кейсов (проверок) на данную задачу. _ _3) Умножаем кол-во на примерное среднее время прохождение кейсов (для веба это в районе 4х минут, дальше зависит от специфики отрасли). _ _4) Закладываем риски в 0.66 от оценки',
//     'assets/voise/0qUs34.mp3'
//   ],
//   [
//     'раскажите про Жизненный цикл бага',
//     '1) Баг создан_2) Назначен на разработчика _3) Приоритизирован _4) Взят в работу _5) Исправлен _6) Тестируется (retest) - если не исправлен то в обратно в пункт 2 _7) Закрыт',
//     'assets/voise/0qUs35.mp3'
//   ],
//   [
//     'Как вы будете тестировать карандаш/чайник/чашку/лифт…?',
//     'С таким вопросами только на ...',
//     'assets/voise/0qUs36.mp3'
//   ],
//   [
//     'Что такое тест кейс?',
//     'это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или её части.',
//     'assets/voise/0qUs37.mp3'
//   ],
//   [
//     'Что такое тестирование API?',
//     'Тестирование API — это тип тестирования программного обеспечения, при котором анализируется интерфейс прикладной программы (API), чтобы убедиться, что он соответствует ожидаемой функциональности, безопасности, производительности и надежности. Тесты выполняются непосредственно в API и в рамках интеграционного тестирования. _ _При тестировании API фокусируются на анализе бизнес-логики, а также безопасности откликов приложений и данных. _ _Тест API обычно выполняется путем отправки запросов к одной или нескольким конечным точкам API и сравнения ответа с ожидаемыми результатами. _ _Тестирование API считается критически важным для автоматизации тестирования, потому что API — основной интерфейс логики приложения, и поскольку тесты GUI трудно поддерживать с короткими циклами выпуска и частыми изменениями при гибкой разработке программного обеспечения и использовании подходов DevOp',
//     'assets/voise/0qUs38.mp3'
//   ],
//   [
//     'Приведите примеры интеграции через API.',
//     'системы бронирования билетов, например, Aviasales. Пользователи ожидают, что самые дешевые варианты перелетов на определенные даты будут доступны и показаны им по запросу. Это требует, чтобы приложение связывалось со всеми авиакомпаниями, чтобы найти наилучшие варианты перелета — это делается через API. _   _ В данном случае необходимо выполнить тесты API, чтобы убедиться, что система бронирования билетов успешно взаимодействует с другими компаниями и предоставляет пользователям правильные результаты в соответствующие сроки. Кроме того, если пользователь бронирует рейс и оплачивает его с помощью стороннего платежного сервиса, то должны быть выполнены тесты API, чтобы гарантировать, что платежный сервис и системы бронирования путешествий могут эффективно взаимодействовать, обрабатывать платеж и сохранять конфиденциальные данные пользователя в безопасности.',
//     'assets/voise/0qUs39.mp3',
//     'https://logrocon.ru/news/api_testing'
//   ],
//   [
//     'В чем разница между SOAP и REST?',
//     'REST и SOAP на самом деле не сопоставимы. REST — это архитектурный стиль. SOAP — это формат обмена сообщениями. _Есть сылка чтобы изучить подробннее',
//     'assets/voise/0qUs40.mp3',
//     'https://habr.com/ru/post/483204/'
//   ],
//   [
//     'Перечислите ключевые элементы HTTP-запроса! У метода Get есть тело запроса ? ',
//     'url, _методы,_загаловки запроса, _тело запроса ! _ _GET-запросы могут иметь тело!. Большинство реализаций проигнорируют его или отклонят запрос. Но даже если сервер, предоставляющий ваш API, разрешает тело, вы не можете его использовать браузеры его отклонят',
//     'assets/voise/0qUs41.mp3'
//   ],
//   [
//     'Может ли у ПО быть сразу несколько баз данных?',
//     'Если вопрос в возможности то да может, но возникнут проблемы с оптимизацией',
//     'assets/voise/0qUs42.mp3'
//   ],
//   [
//     'Что такое реляционная база данных?',
//     'Реляционные базы данных представляют собой базы данных, которые используются для хранения и предоставления доступа к взаимосвязанным элементам информации. _Реляционные базы данных основаны на реляционной модели — интуитивно понятном, наглядном табличном способе представления данных. _Каждая строка, содержащая в таблице такой базы данных, представляет собой запись с уникальным идентификатором, который называют ключом. Столбцы таблицы имеют атрибуты данных, а каждая запись обычно содержит значение для каждого атрибута, что дает возможность легко устанавливать взаимосвязь между элементами данных.',
//     'assets/voise/0qUs43.mp3'
//   ],
//   [
//     'Приведите несколько примеров, которые объясняют критерии входа для тестирования ПО.',
//     '• все дефекты, которые относятся к ранним стадиям проектирования закрыты и проверены;_   • Код проверенный с помощью осуществления «Unit» тестов;_   • Основные функциональные возможности ПО готовы для тестирования;_  • Имеется документация, которая определяет требования;_   • Все тестировщики ознакомлены с архитектурой ПО;_    • Все тестировщики ознакомлены с целями проекта; _   • Готова среда тестирования;_доступные для использования билды;_   • Утверждены план тестирования и/или тестовые случаи.',
//     'assets/voise/0qUs44.mp3'
//   ],
//   [
//     'Всегда ли нужна автоматизация?',
//     'Автотесты не являются подходящей альтернативой: _    • если сценарии тестов новые и не тестировались вручную _   • если тесты требуют постоянных изменений и в случае _    • если запустить сценарий тестирования нужно только один раз.',
//     'assets/voise/0qUs45.mp3'
//   ],
//   [
//     'Приведите несколько причин, которые приводят к багам в ПО.',
//     'человеческие ошибки (процесс проектирования и процесс реализации); _изменение требований в то время как ПО под испытанием; _непонимание требований и спецификаций;_отсутствие времени;_плохая приоритизация тестирования;_плохая ориентация в версиях ПО;_сложность самого ПО.',
//     'assets/voise/0qUs46.mp3'
//   ],
//   [
//     'чем отличаются между собой дефект,эрор, Баг и сбой ',
//     ' _ • Дефект (он же баг)— это несоответствие фактического результата ожидаемому результату, описанному в требованиях. _ _• Error— ошибка пользователя, то есть он пытается использовать программу иным способом. _Пример — вводит буквы в поля, где требуется вводить цифры (возраст, количество товара и т.п.). _ _• Bug (defect) — ошибка программиста (или другого члена команды), то есть когда в программе, что-то идёт не так как планировалось и программа выходит из-под контроля. _      Например, когда никак не контролируется ввод пользователя, в результате неверные данные вызывают краши или иные проблемы в работе программы. Либо внутри программа построена так, что изначально не соответствует тому, что от неё ожидается. _ _• Failure — сбой (причём необязательно аппаратный) в работе компонента, всей программы или системы. _То есть, существуют такие дефекты, которые приводят к сбоям. И существуют такие, которые не приводят. UI-дефекты например. Но аппаратный сбой, никак не связанный с software, тоже является failure.  ',
//     'assets/voise/0qUs47.mp3'
//   ],
//   [
//     'Тестирование локализации',
//     'тестирование, направленное на проверку корректности и качества адаптации продукта к использованию на том или ином языке с учётом национальных и культурных особенностей.',
//     'assets/voise/0qUs48.mp3'
//   ],
//   [
//     'Почему вы решили стать тестировщиком?',
//     'Если бы ты жил в Китае и задвал бы такие же вопросы,тебя бы звали Кон-Чен-Ый',
//     'assets/voise/0qUs49.mp3'
//   ],
//   [
//     'Почему хотите работать именно у нас?',
//     '',
//     'assets/voise/0qUs50.mp3'
//   ],
//   [
//     'Кем вы видите себя через 5 лет?',
//     'профессионалом своего дела среди единомышленников',
//     'assets/voise/0qUs51.mp3'
//   ],
//   [
//     'Что такое тестирование серого ящика?',
//     'Тестирование серого ящика предусматривает частичную осведомленность о внутренних процессах. __ Данный метод - это комбинация тестирования белого и черного ящиков. Специалист стремится найти все проблемы функционирования и ошибки в коде. На этой стадии тестировщик может реализовать сквозной тест.',
//     'assets/voise/0qUs52.mp3'
//   ],
//   [
//     'что такое Позитивное тестирование?',
//     'Позитивное тестирование помогает убедиться в том, что приложение функционирует должным образом и позволяет проверить, работает ли система в нормальных условиях так, как задумывалось',
//     'assets/voise/0qUs53.mp3'
//   ],
//   [
//     'что такое Негативное тестирование?',
//     ' это тип тестирования ПО, направленный на проверку того, что система или приложение ведут себя должным образом в негативных ситуациях, то есть, когда они получают недопустимые или неожиданные входные данные.',
//     'assets/voise/0qUs54.mp3'
//   ],
//   [
//     'зачем проводят Повторное тестирование ?',
//     'Чтобы проверить, что тестовые сценарии, не прошедшие во время последнего прогона тестов, работают после исправления дефектов',
//     'assets/voise/0qUs55.mp3'
//   ],
//   [
//     'что такое сравнительное тестирование?',
//     'тестирование, направленное на сравнительный анализ преимуществ и недостатков разрабатываемого продукта по отношению к его основным конкурентам.',
//     'assets/voise/0qUs56.mp3'
//   ],
//   [
//     'что такое UX и UI ? в чем их разница',
//     '(  User eXperience — опыт пользователя — ощущение, испытываемое пользователем во время использования цифрового продукта. _ User Interface — пользовательский интерфейс — это инструмент, позволяющий осуществлять взаимодействие «пользователь — приложение».',
//     'assets/voise/0qUs57.mp3'
//   ],
//   [
//     'что такое Дымовое тестирование?',
//     'короткий цикл тестов для подтверждения, что после сборки кода (нового или исправленного) приложение стартует и выполняет основные функции.',
//     'assets/voise/0qUs58.mp3'
//   ],
//   [
//     'Чем отличается Exploratory vs Ad-hoc testing ?',
//     'Исследовательское тестирование (exploratory testing) - это одновременное изучение системы, проектирование тестов (тест дизайн) и тестирование. _ Данная техника базируется на опыте тестировщика (experience based). _Ad-hoc тестирование - это особый вид тестирования, не предполагающий никакой подготовки или планирования, здесь нет тестовых сценариев, как и какого-либо ожидания от результата. ',
//     'assets/voise/0qUs59.mp3',
//     'https://www.careerist.com/ru-insights/intuitivnoe-testirovanie-ad-hoc-testing#:~:text=%D0%A7%D1%82%D0%BE%20%D1%8D%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%2C%20%D0%BA%D0%B0%D0%BA%D0%B8%D0%B5%20%D0%B5%D1%81%D1%82%D1%8C,%D0%BA%D0%B0%D0%BA%D0%BE%D0%B3%D0%BE%2D%D0%BB%D0%B8%D0%B1%D0%BE%20%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F%20%D0%BE%D1%82%20%D1%80%D0%B5%D0%B7%D1%83%D0%BB%D1%8C%D1%82%D0%B0%D1%82%D0%B0.'
//   ]
// ]`

// console.log(matchSearch(text));


// function replaceAt(text, index, replacement) {
//   return text.substring(0, index) + replacement + text.substring(index + 1, +text.length);
// }

// // console.log('~какя_Приве_'.replaceAt(5, '<Br'));

// // matchSearch('~какя_Приве_')
// function matchSearch(text) {
//   let p = text
//   for (let i = 0; i < p.length; i++) {
//     const element = p[i];
//     // console.log(element);
//     if (element === "'") {
//       p = replaceAt(p, i, '"')
//     }
//   }
//   return p
// }








// let pp = [
//   'Что такое тестирование?',
//   'Зачем тестировать ПО?',
//   'Какие существуют этапы тестирования?',
//   'Какие типы тестирования можете назвать?',
//   'Какие уровни тестирования знаете?',
//   'Какие техники тест-дизайна знаете?',
//   'Что такое техника анализа классов эквивалентности?',
//   'Что такое техника анализа предельных значений? В чем ценность этой техники?',
//   'Что такое Regression и Confirmation тестирование, какая между ними разница?',
//   'Как часто следует проводить регрессионное тестирование продукта?',
//   'Какие бывают виды интеграционного тестирования?',
//   'Что такое Configuration Testing?',
//   'Что такое Exploratory Testing?',
//   'Какие существуют UI-стандарты?',
//   'Что такое Black/Grey/White Box Testing?',
//   'Что такое Performance Testing?',
//   'Что такое Smoke и Sanity тестирование и какая между ними разница?',
//   'Что такое Traceability Matrix?',
//   'Что такое Sanity Testing?',
//   'Что такое End-to-End тест?',
//   'Что такое тестирование безопасности?',
//   'Что такое испытание на основе рисков?',
//   'Что такое динамическое тестирование?',
//   'Что такое «парадокс пестицида»?',
//   'Опишите основные фазы STLC? Дайте определение Entry и Exit Criteria.',
//   'Что такое Bug, Error, Failure, Fault?',
//   'Какие есть атрибуты баг-репорта? Какие основные поля для заполнения?',
//   'Какова разница между приоритетом и серьезностью?',
//   'Приведите примеры серьезного, но не приоритетного бага.',
//   'В чем разница между валидацией и верификацией?',
//   'Зачем нужна тестовая документация? Какие её виды?',
//   'Что такое тест-план? Какие элементы у него есть?',
//   'Какую обязательную информацию должен содержать…ть и нужен ли он вообще для большинства проектов?',
//   'Какая разница между чеклистом и тест-кейсами?',
//   'Приведите пример хорошего тест-кейса.',
//   'Ответы на некоторые из этих вопросов вы можете най…тикум. Техники тест дизайна” (часть 1 и часть 2).',
//   'AQA (Automation QA)',
//   'Программирование',
//   'Что такое ООП? Назовите его принципы с примерами?',
//   'Что такое интерфейс? Что такое абстрактный класс? Чем они отличаются?',
//   'Что такое SOLID? Приведите примеры.',
//   'Что такое DRY, KISS, YAGNI?',
//   'Какие паттерны GOF вам известны? Приведите примеры их использования.',
//   'Что такое PageObject и PageFactory?',
//   'Какая иерархия Collections?',
//   'Какая разница между Thread class и Runnable interface?',
//   'Какая разница между String, Stringbuffer и Stringbuilder?',
//   'Разница между final, finally и finalize?',
//   'Selenium',
//   '​​Что такое Selenium и зачем его используют?',
//   'Что такое драйвер браузера?',
//   'Какие виды локаторов страницы существуют? Каковы их преимущества и недостатки?',
//   'Что такое Selenium Waits? Какие есть и чем отличаются?',
//   'Какие exceptions может бросить Selenium? Что они означают и как их обрабатывать?',
//   'Для чего используют JavaScriptExecutor? Приведите примеры.',
//   'Что такое Selenium Grid?',
//   'Какие способы click и send keys Selenium?',
//   'Как вы запускаете параллельное выполнение тестов? Что такое ThreadLocal?',
//   'Какая разница между Action и Actions?',
//   'Как написать метод isElementPresent?',
//   'Как вычитать данные из динамической веб-таблицы?',
//   'Можете ли вы назвать 10 интерфейсов в Selenium?',
//   'Назовите два способа, позволяющих автоматизировать капчу.',
//   'Вспомните типы навигационных команд Selenium.',
//   'Как найти поврежденные ссылки в Selenium WebDriver?',
//   'Какую технику следует рассмотреть, используя в… сценарий, если «нет ни frame id, ни frame name»?',
//   'Ответы на некоторые из этих вопросов вы можете най…бинаре “Selenoid или Selenium Grid — что лучше?”.',
//   'TestNG/JUnit',
//   'Для чего нужны TestNG/JUnit?',
//   'Какие инструкции используются в TestNG/JUnit?',
//   'Какие assertions есть в TestNG/JUnit?',
//   'Как выполнять тесты параллельно TestNG/JUnit?',
//   'Ответы на некоторые из этих вопросов вы можете най…ео курсе Web Testing Automation on Java (урок 4).',
//   'Git',
//   'Для чего используют системы контроля версий?',
//   'Что такое Git? Каков принцип его работы?',
//   'Что такое commits, branches в Git?',
//   'Для чего нужны GitHub, GitLab и другие, базирующиеся на Git, вебхостинги проектов?',
//   'Ответы на некоторые из этих вопросов вы можете найти в видео курсе Основы работы с Git.',
//   'CI',
//   ' Что такое CI?',
//   ' Как автоматическое тестирование интегрируется в CI?',
//   ' Как настроить Job или Pipeline на знакомом вам CI-инструменте?',
//   ' Какие инструменты для генерации репорта после выполнения автоматических тестов вы знаете?',
//   ' Какую информацию должен содержать отчет о выполнении автоматических тестов?',
//   'Ответы на некоторые из этих вопросов вы можете найти в видео курсе Web Testing (урок 4).'
// ]
// let obj = {}
// for (let i = 0; i < pp.length; i++) {
//   const element = pp[i];
//   if (element !=='') {
//     obj[i] = element
    
//   }
// }
// console.log(obj);

// let o = {
//   "0": "Что такое тестирование?",
//   "1": "Зачем тестировать ПО?",
//   "2": "Какие существуют этапы тестирования?",
//   "3": "Какие типы тестирования можете назвать?",
//   "4": "Какие уровни тестирования знаете?",
//   "5": "Какие техники тест-дизайна знаете?",
//   "6": "Что такое техника анализа классов эквивалентности?",
//   "7": "Что такое техника анализа предельных значений? В чем ценность этой техники?",
//   "8": "Что такое Regression и Confirmation тестирование, какая между ними разница?",
//   "9": "Как часто следует проводить регрессионное тестирование продукта?",
//   "10": "Какие бывают виды интеграционного тестирования?",
//   "11": "Что такое Configuration Testing?",
//   "12": "Что такое Exploratory Testing?",
//   "13": "Какие существуют UI-стандарты?",
//   "14": "Что такое Black/Grey/White Box Testing?",
//   "15": "Что такое Performance Testing?",
//   "16": "Что такое Smoke и Sanity тестирование и какая между ними разница?",
//   "17": "Что такое Traceability Matrix?",
//   "18": "Что такое Sanity Testing?",
//   "19": "Что такое End-to-End тест?",
//   "20": "Что такое тестирование безопасности?",
//   "21": "Что такое испытание на основе рисков?",
//   "22": "Что такое динамическое тестирование?",
//   "23": "Что такое «парадокс пестицида»?",
//   "24": "Опишите основные фазы STLC? Дайте определение Entry и Exit Criteria.",
//   "25": "Что такое Bug, Error, Failure, Fault?",
//   "26": "Какие есть атрибуты баг-репорта? Какие основные поля для заполнения?",
//   "27": "Какова разница между приоритетом и серьезностью?",
//   "28": "Приведите примеры серьезного, но не приоритетного бага.",
//   "29": "В чем разница между валидацией и верификацией?",
//   "30": "Зачем нужна тестовая документация? Какие её виды?",
//   "31": "Что такое тест-план? Какие элементы у него есть?",
//   "32": "Какую обязательную информацию должен содержать…ть и нужен ли он вообще для большинства проектов?",
//   "33": "Какая разница между чеклистом и тест-кейсами?",
//   "34": "Приведите пример хорошего тест-кейса.",
//   "35": "Ответы на некоторые из этих вопросов вы можете най…тикум. Техники тест дизайна” (часть 1 и часть 2).",
//   "36": "AQA (Automation QA)",
//   "37": "Программирование",
//   "38": "Что такое ООП? Назовите его принципы с примерами?",
//   "39": "Что такое интерфейс? Что такое абстрактный класс? Чем они отличаются?",
//   "40": "Что такое SOLID? Приведите примеры.",
//   "41": "Что такое DRY, KISS, YAGNI?",
//   "42": "Какие паттерны GOF вам известны? Приведите примеры их использования.",
//   "43": "Что такое PageObject и PageFactory?",
//   "44": "Какая иерархия Collections?",
//   "45": "Какая разница между Thread class и Runnable interface?",
//   "46": "Какая разница между String, Stringbuffer и Stringbuilder?",
//   "47": "Разница между final, finally и finalize?",
//   "48": "Selenium",
//   "49": "​​Что такое Selenium и зачем его используют?",
//   "50": "Что такое драйвер браузера?",
//   "51": "Какие виды локаторов страницы существуют? Каковы их преимущества и недостатки?",
//   "52": "Что такое Selenium Waits? Какие есть и чем отличаются?",
//   "53": "Какие exceptions может бросить Selenium? Что они означают и как их обрабатывать?",
//   "54": "Для чего используют JavaScriptExecutor? Приведите примеры.",
//   "55": "Что такое Selenium Grid?",
//   "56": "Какие способы click и send keys Selenium?",
//   "57": "Как вы запускаете параллельное выполнение тестов? Что такое ThreadLocal?",
//   "58": "Какая разница между Action и Actions?",
//   "59": "Как написать метод isElementPresent?",
//   "60": "Как вычитать данные из динамической веб-таблицы?",
//   "61": "Можете ли вы назвать 10 интерфейсов в Selenium?",
//   "62": "Назовите два способа, позволяющих автоматизировать капчу.",
//   "63": "Вспомните типы навигационных команд Selenium.",
//   "64": "Как найти поврежденные ссылки в Selenium WebDriver?",
//   "65": "Какую технику следует рассмотреть, используя в… сценарий, если «нет ни frame id, ни frame name»?",
//   "66": "Ответы на некоторые из этих вопросов вы можете най…бинаре “Selenoid или Selenium Grid — что лучше?”.",
//   "67": "TestNG/JUnit",
//   "68": "Для чего нужны TestNG/JUnit?",
//   "69": "Какие инструкции используются в TestNG/JUnit?",
//   "70": "Какие assertions есть в TestNG/JUnit?",
//   "71": "Как выполнять тесты параллельно TestNG/JUnit?",
//   "72": "Ответы на некоторые из этих вопросов вы можете най…ео курсе Web Testing Automation on Java (урок 4).",
//   "73": "Git",
//   "74": "Для чего используют системы контроля версий?",
//   "75": "Что такое Git? Каков принцип его работы?",
//   "76": "Что такое commits, branches в Git?",
//   "77": "Для чего нужны GitHub, GitLab и другие, базирующиеся на Git, вебхостинги проектов?",
//   "78": "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Основы работы с Git.",
//   "79": "CI",
//   "80": " Что такое CI?",
//   "81": " Как автоматическое тестирование интегрируется в CI?",
//   "82": " Как настроить Job или Pipeline на знакомом вам CI-инструменте?",
//   "83": " Какие инструменты для генерации репорта после выполнения автоматических тестов вы знаете?",
//   "84": " Какую информацию должен содержать отчет о выполнении автоматических тестов?",
//   "85": "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Web Testing (урок 4)."
// }
// let ap = {}
// for (const key in o) {
//   if (Object.hasOwnProperty.call(o, key)) {
//     const element = o[key];
//     ap[key] = [element]
//   }
// }
// console.log(ap);

// for (let i = 0; i < o.length; i++) {
//   const element = o[i];
//   if (element !=='') {
//     ap[i] = [element]
    
//   }
// }


// let jun = [
//   '1. Как вы преодолеете трудности из-за отсутствия надлежащей документации для тестирования?',
//   '2. Какой подход является наилучшим для старта QA в проекте?',
//   '3. Какие препятствия могут возникнуть в обеспечении качества для Agile Tester?',
//   '4. Что такое Definition of Done?',
//   '5. Когда можно считать, что тестирование окончено?',
//   '6. Что такое RCA в тестировании? Нужно ли его проводить?',
//   '7. Какой подход вы используете для Test Cases Review?',
//   '8. Какие виды рисков существуют? Что такое Mitigation Plan?',
//   '9. На основе чего нужно составлять стратегию для проведения тестирования нагрузки?',
//   '10. Как часто следует ревьюировать тестовую документацию?',
//   '11. Как можно быстро сделать выборку необходимых проверок для смоук-тестирования?',
//   '12. Как запланировать загруженность команды тестировщиков?',
//   '13. Какую ценность несет анализ результатов тестирования команде и проекту в целом?',
//   '14. Как можно подкорректировать флоу разработки, ч… на выходе и уменьшить количество багов на проде?',
//   '15. Расскажите о метриках качества, которые вы применяли. Зачем они нужны?',
//   '16. Как провести эстимейт задачи? Каковы техники оценки объема тестирования существуют?',
//   '17. Как можно посчитать покрытие тестами функционала?',
//   '18. Какое оптимальное количество шагов в тестовом сценарии?',
//   '19. Как избежать появления регрессивных дефектов?',
//   '20. Что такое тестирование со смещением влево (Shift left testing)?',
//   '21. Как будете тестировать программу, если для продукта нет документации?',
//   '22. В чем смысл юнит-тестов?',
//   '23. Какие минусы полной автоматизации тестирования?',
//   '24. Что такое ROI и как его считать?',
//   '25. Что такое CI/CD? Какие плюсы и минусы этого подхода?',
//   '26. TOP OWASP: какие знаете уязвимости и методы защиты?',
//   '27. Что вы думаете по поводу BDD? Когда следует ис… для UI или API автоматизированного тестирования?',
//   '28. Что такое сокеты и как их тестировать, вручную и автоматизировано? Зачем их используют?',
//   '29. Когда следует делать стресс-тестирование на пр… тестирования? Что учесть при выборе инструмента?',
//   'Бесплатные вебинары по схожей тематике:',
//   '30. Расскажите об алгоритмах шифрования трафика.',
//   '31. Что такое NIC?',
//   '32. Для чего нужен протокол RTP?',
//   '33. Что, по вашему мнению, лучше – SIP или PRI?',
//   '34. Что такое NAT?',
//   'Практические задания',
//   '35. Сформулируйте негативные сценарии для POST-запроса, который создаёт нового пользователя.',
//   '36. Как вы регулируете конфликтные ситуации между QA и разработчиками?',
//   '37. Есть проект, на котором нет тестовой документа…волиться. Какое решение по команде можно принять?',
//   '38. Продайте мне тестирование как клиенту, не жела…спользуя профессиональные термины (не лить воду).',
//   '39. У вас есть онлайн-калькулятор. Вы вводите 1+1 …асскажите, как вы будете искать причину проблемы.',
//   '40. Могут ли быть такие виды архитектур? Чего може…я правильной работы архитектур, приведенных ниже?',
//   '41. Есть веб-страница с полями e-mail, password и …к проверить, что данные отправлены в базу данных?',
//   '42. Какое минимальное количество тест-кейсов необх… убедиться в корректной работе этой веб-страницы?',
//   '43. Как проверить безопасность на веб-странице (на выбор)?'
// ]
// // remove nuber 
// let object = {}
// for (let i = 0; i < jun.length; i++) {
//   const element = jun[i];

// element.slice(element.indexOf(' ')+1);
// object[(i+1)] = [element.slice(element.indexOf(' ')+1)]
// }
// console.log(object);








// let arrp1 = [
//   'Теория',
//   '1. Назовите обязанности QA?',
//   '2. Что знаете о тестировании нагрузки? В каком слу…тестирование? На каком этапе готовности продукта?',
//   '3. Что такое таблица решений/decision table и как её можно использовать?',
//   '4. Что может быть критериями запуска и завершения тестирования?',
//   '5. Расскажите о вариантах интегрирования тестовой …ментации в проект, инструментах для работы с ней.',
//   '6. Как организовать сквозное тестирование (e2e)?',
//   '7. Какие тест-кейсы можно сдать для тестирования баз данных?',
//   '8. Приведите примеры подходов для тестирования локализации.',
//   '9. Что такое A/B тестирование?',
//   '10. Что такое mock/stub? Какие знаете инструменты для работы с ними?',
//   '11. Когда нужно использовать технику Pairwise?',
//   '12. Что такое fuzz-тестирование и где его используют?',
//   '13. Что такое REgexp?',
//   '14. Как меняется стоимость дефекта при тестировании программного обеспечения?',
//   '15. Каковы пути анализа бизнеса клиента? Как определить целесообразность того или иного функционала?',
//   '16. Назовите последовательность выполнения CI/CD процесса на проекте.',
//   '17. Какое должно быть процентное соотношение между…тельным и отрицательным тестированием на проекте?',
//   '18. Какой вид тестирования целесообразнее проводить до релиза?',
//   '19. Есть ли разница между bug leakage и bug release?',
//   '20. Может ли быть ситуация, когда критерии заверше… выполнены? Что должно происходить в этом случае?',
//   '21. Что мы действительно должны покрывать тест-кей…и денег? Когда нецелесообразно писать тест-кейсы?',
//   '22. Для какого функционала труднее всего написать тест-кейсы?',
//   '23. Как посчитать Cyclomatic complexity?',
//   '24. В чем основная разница между defect detection percentage и defect removal efficiency?',
//   '25. Какие модели risk-based testing вы знаете?',
//   '26. Что такое тестирование API? Какими инструментами пользуются для его выполнения?',
//   '27. Что такое performance testing? Какими инструментами пользуются для его выполнения?',
//   '28. Что такое load и stress testing? Какими инструментами пользуются для их выполнения?',
//   'Видео курсы по схожей тематике:',
//   'Тестирование безопасности веб-приложений',
//   'QA Стартовый',
//   'TDD - Разработка через тестирование',
//   '29. Что такое contract testing?',
//   '30. Какая разница между Scrum и Kanban?',
//   '31. Расскажите о ритуалах, ценностях и ролях в Scrum.',
//   '32. Как выбор методологии может повлиять на качество разработки?',
//   '33. Нулевой спринт в Scrum. Для тестирования есть …ием «Настройка среды». Что здесь нужно выполнять?',
//   ' ',
//   'Ответы на некоторые из этих вопросов вы можете най…ология управления проектами. Вступление в SCRUM”.',
//   ' ',
//   'AQA',
//   ' ',
//   'Selenium',
//   '34. Расскажите, как вы будете строить и внедрять стратегию по автоматизации тестирования.',
//   '35. Как взаимодействуют клиентская библиотека Selenium, драйвер браузера и сам браузер?',
//   '36. Для чего используют browser capabilities, arguments и options?',
//   '37. Что такое iframe и как с ним работать в Selenium?',
//   '38. Как обрабатывать браузерные сообщения (alerts)?',
//   '39. Что такое Appium?',
//   '40. Что такое Electron-based applications? Как использовать Selenium и Appium для их тестирования?',
//   '41. Как взаимодействовать с запросами, отправляемыми из браузера?',
//   '42. Как взаимодействовать с cookies, LocalStorage и SessionStorage?',
//   'Тестовая инфраструктура',
//   '43. Что такое и чем отличаются виртуальная машина, симулятор и эмулятор?',
//   '44. Что такое контейнер и чем он отличается от виртуальной машины?',
//   '45. Как используют виртуальные машины и контейнеры в автоматизации?',
//   '46. ​​Что такое IaaS и PaaS? Приведите примеры.',
//   '47. Что такое Configuration Management?',
//   '48. Что такое Provisioning?',
//   '49. Какие команды Linux Shell вам известны? Как с …ell найти лог-файл и строчку с ошибкой в ​​файле?',
//   '50. Какие команды Windows CMD вам известны? Как с помощью команд Windows CMD найти IP-адрес машины?',
//   '51. Что такое SSH и как им пользоваться?',
//   '52. Что такое bash и batch скрипты? Зачем их используют?',
//   ' ',
//   'Web',
//   '53. Какая разница между авторизацией и аутентификацией?',
//   '54. Как происходит авторизация на сервере?',
//   '55. Какие статус-коды ошибок бывают? Может ли серв… отправить код 400, если проблема на его стороне?',
//   '56. Как выполнить Debug страницы в браузере?',
//   '57. Как протестировать адаптивную верстку?',
//   '58. Что такое WebSocket и как проверить обрыв соединения?',
//   '59. Каковы есть основные виды уязвимости веб-приложений?',
//   '60. Какие инструменты для тестирования Web performance client-side знаете?',
//   '61. Какова разница между методами GET и POST?',
//   '62. Какая разница между методами PUT и PATCH?',
//   '63. Какие знаете сниферы?',
//   '64. Какова разница между DROP и TRUNCATE?',
//   '65. Что такое case function?',
//   '66. Что такое collation?',
//   '67. Что такое схема GraphQL?',
//   '68. Объясните разницу между OLTP и OLAP.',
//   '69. Вспомните разные типы репликации в SQL Server?',
//   '70. Что вы понимаете под Self Join? Приведите примеры.',
//   '71. Что такое cursor и как им пользоваться?',
//   '72. Что основное нужно проверить при тестировании мобильного приложения?',
//   '73. Что такое Manifest.xml в .apk файле и какие данные там указывают?',
//   '74. Что такое режим разработчика Do not keep activities?',
//   '75. Как происходит перехват трафика http/https для мобильных устройств?',
//   '76. В каком виде хранятся данные в мобильных приложениях локально?',
//   '77. Как тестировать миграцию локальных данных?',
//   '78. Каковы основные компоненты Android-приложений (активити / фрагмент / сервис / интент-фильтр)?',
//   '79. Опишите жизненный цикл активити.',
//   '80. Что такое утечки памяти? Как найти?',
//   '81. Как протестировать билд на Android?',
//   '82. Что такое Testflight? Как тестировать с его помощью?',
//   '83. Как работает Android? Какая у него архитектура?',
//   '84. Как происходит деплой программ IOS/AOS?',
//   'Практические задания',
//   '85. Что делать, если разработчик не соглашается, ч…казать? Как можно предотвратить такую ​​ситуацию?',
//   '86. Сложилась ситуация, когда команда тестирования…зя? А если никакие фичи из релиза забрать нельзя?',
//   '87. Что делать, если проект уже начался, а QA-инже…меет позднее вовлечение QA-инженера в разработку?',
//   '88. Веб-страница с полями e-mail, password и кнопк…т-кейсы, по которым можно проверить эту страницу.',
//   '89. Предположим, что после нажатия кнопки submit с…ерить, что информация отправлена ​​в базу данных?'
// ]










//  for (let i = 0; i < p.length; i++) {
//     const element = p[i];
//     if(i <= 100){
//         arr1.push(element.innerText)
//     }
//       if(i >= 100 && i <= 200){
//         arr2.push(element.innerText)
//     }
//        if(i >= 200 && i <= 300){
//         arr3.push(element.innerText)
//     }
//     if(i >= 300 && i <= 400){
//         arr4.push(element.innerText)
//     }
//   }
// console.log(arr1)
// console.log(arr2)
// console.log(arr3)
// console.log(arr4)





// let k = {
//   "0": [ "Что такое тестирование?" ],
//   "1": [ "Зачем тестировать ПО?" ],
//   "2": [ "Какие существуют этапы тестирования?" ],
//   "3": [ "Какие типы тестирования можете назвать?" ],
//   "4": [ "Какие уровни тестирования знаете?" ],
//   "5": [ "Какие техники тест-дизайна знаете?" ],
//   "6": [ "Что такое техника анализа классов эквивалентности?" ],
//   "7": [
//     "Что такое техника анализа предельных значений? В чем ценность этой техники?"
//   ],
//   "8": [
//     "Что такое Regression и Confirmation тестирование, какая между ними разница?"
//   ],
//   "9": [
//     "Как часто следует проводить регрессионное тестирование продукта?"
//   ],
//   "10": [ "Какие бывают виды интеграционного тестирования?" ],
//   "11": [ "Что такое Configuration Testing?" ],
//   "12": [ "Что такое Exploratory Testing?" ],
//   "13": [ "Какие существуют UI-стандарты?" ],
//   "14": [ "Что такое Black/Grey/White Box Testing?" ],
//   "15": [ "Что такое Performance Testing?" ],
//   "16": [
//     "Что такое Smoke и Sanity тестирование и какая между ними разница?"
//   ],
//   "17": [ "Что такое Traceability Matrix?" ],
//   "18": [ "Что такое Sanity Testing?" ],
//   "19": [ "Что такое End-to-End тест?" ],
//   "20": [ "Что такое тестирование безопасности?" ],
//   "21": [ "Что такое испытание на основе рисков?" ],
//   "22": [ "Что такое динамическое тестирование?" ],
//   "23": [ "Что такое «парадокс пестицида»?" ],
//   "24": [
//     "Опишите основные фазы STLC? Дайте определение Entry и Exit Criteria."
//   ],
//   "25": [ "Что такое Bug, Error, Failure, Fault?" ],
//   "26": [
//     "Какие есть атрибуты баг-репорта? Какие основные поля для заполнения?"
//   ],
//   "27": [ "Какова разница между приоритетом и серьезностью?" ],
//   "28": [ "Приведите примеры серьезного, но не приоритетного бага." ],
//   "29": [ "В чем разница между валидацией и верификацией?" ],
//   "30": [ "Зачем нужна тестовая документация? Какие её виды?" ],
//   "31": [ "Что такое тест-план? Какие элементы у него есть?" ],
//   "32": [
//     "Какую обязательную информацию должен содержать…ть и нужен ли он вообще для большинства проектов?"
//   ],
//   "33": [ "Какая разница между чеклистом и тест-кейсами?" ],
//   "34": [ "Приведите пример хорошего тест-кейса." ],
//   "35": [
//     "Ответы на некоторые из этих вопросов вы можете най…тикум. Техники тест дизайна” (часть 1 и часть 2)."
//   ],
//   "36": [ "AQA (Automation QA)" ],
//   "37": [ "Программирование" ],
//   "38": [ "Что такое ООП? Назовите его принципы с примерами?" ],
//   "39": [
//     "Что такое интерфейс? Что такое абстрактный класс? Чем они отличаются?"
//   ],
//   "40": [ "Что такое SOLID? Приведите примеры." ],
//   "41": [ "Что такое DRY, KISS, YAGNI?" ],
//   "42": [
//     "Какие паттерны GOF вам известны? Приведите примеры их использования."
//   ],
//   "43": [ "Что такое PageObject и PageFactory?" ],
//   "44": [ "Какая иерархия Collections?" ],
//   "45": [ "Какая разница между Thread class и Runnable interface?" ],
//   "46": [ "Какая разница между String, Stringbuffer и Stringbuilder?" ],
//   "47": [ "Разница между final, finally и finalize?" ],
//   "48": [ "Selenium" ],
//   "49": [ "​​Что такое Selenium и зачем его используют?" ],
//   "50": [ "Что такое драйвер браузера?" ],
//   "51": [
//     "Какие виды локаторов страницы существуют? Каковы их преимущества и недостатки?"
//   ],
//   "52": [ "Что такое Selenium Waits? Какие есть и чем отличаются?" ],
//   "53": [
//     "Какие exceptions может бросить Selenium? Что они означают и как их обрабатывать?"
//   ],
//   "54": [ "Для чего используют JavaScriptExecutor? Приведите примеры." ],
//   "55": [ "Что такое Selenium Grid?" ],
//   "56": [ "Какие способы click и send keys Selenium?" ],
//   "57": [
//     "Как вы запускаете параллельное выполнение тестов? Что такое ThreadLocal?"
//   ],
//   "58": [ "Какая разница между Action и Actions?" ],
//   "59": [ "Как написать метод isElementPresent?" ],
//   "60": [ "Как вычитать данные из динамической веб-таблицы?" ],
//   "61": [ "Можете ли вы назвать 10 интерфейсов в Selenium?" ],
//   "62": [ "Назовите два способа, позволяющих автоматизировать капчу." ],
//   "63": [ "Вспомните типы навигационных команд Selenium." ],
//   "64": [ "Как найти поврежденные ссылки в Selenium WebDriver?" ],
//   "65": [
//     "Какую технику следует рассмотреть, используя в… сценарий, если «нет ни frame id, ни frame name»?"
//   ],
//   "66": [
//     "Ответы на некоторые из этих вопросов вы можете най…бинаре “Selenoid или Selenium Grid — что лучше?”."
//   ],
//   "67": [ "TestNG/JUnit" ],
//   "68": [ "Для чего нужны TestNG/JUnit?" ],
//   "69": [ "Какие инструкции используются в TestNG/JUnit?" ],
//   "70": [ "Какие assertions есть в TestNG/JUnit?" ],
//   "71": [ "Как выполнять тесты параллельно TestNG/JUnit?" ],
//   "72": [
//     "Ответы на некоторые из этих вопросов вы можете най…ео курсе Web Testing Automation on Java (урок 4)."
//   ],
//   "73": [ "Git" ],
//   "74": [ "Для чего используют системы контроля версий?" ],
//   "75": [ "Что такое Git? Каков принцип его работы?" ],
//   "76": [ "Что такое commits, branches в Git?" ],
//   "77": [
//     "Для чего нужны GitHub, GitLab и другие, базирующиеся на Git, вебхостинги проектов?"
//   ],
//   "78": [
//     "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Основы работы с Git."
//   ],
//   "79": [ "CI" ],
//   "80": [ " Что такое CI?" ],
//   "81": [ " Как автоматическое тестирование интегрируется в CI?" ],
//   "82": [ " Как настроить Job или Pipeline на знакомом вам CI-инструменте?" ],
//   "83": [
//     " Какие инструменты для генерации репорта после выполнения автоматических тестов вы знаете?"
//   ],
//   "84": [
//     " Какую информацию должен содержать отчет о выполнении автоматических тестов?"
//   ],
//   "85": [ "Что такое клиент-серверная архитектура?" ],
//   "86": [ "Что может выступать в роли клиента?" ],
//   "87": [ "Что такое REST API, SOAP? В чем разница?" ],
//   "88": [ "Какие протоколы передачи данных знаете?" ],
//   "89": [
//     "Какие способы взаимодействия с API существуют? В чем разница между ними?"
//   ],
//   "90": [ "Как можно протестировать API, что там нужно проверять?" ],
//   "91": [ "Как расшифровывается CRUD?" ],
//   "92": [ "Чем отличается GET от POST?" ],
//   "93": [ "Какие отличия между XML и JSON?" ],
//   "94": [ "Какие знаете форматы передачи данных?" ],
//   "95": [ "Как происходит шифрование?" ],
//   "96": [ "Какие бывают виды баз данных?" ],
//   "97": [
//     "Охарактеризуйте каждый класс status code (1хх; 2xx; 3xx; 4xx; 5xx)."
//   ],
//   "98": [ "Какие есть HTTP-методы?" ],
//   "99": [ "Какие знаете Web elements?" ],
//   "100": [ "Какие браузеры знаете? В чем их отличие?" ],
//   "101": [
//     "Для чего необходимы инструменты разработчика в…rome DevTools) и как они помогают в тестировании."
//   ],
//   "102": [ "Что такое кэш?" ],
//   "103": [ "Что такое сессия?" ],
//   "104": [ "Зачем нужны cookies?" ],
//   "105": [ "Что такое фрейм?" ],
//   "106": [ "Что такое HTML/CSS/JavaScript?" ],
//   "107": [ "Какую структуру имеет веб-страница?" ],
//   "108": [ "Зачем чистить кэш?" ],
//   "109": [ "Какие виды тестирования можно применить только к Web?" ],
//   "110": [ "Для чего в веб-страницах используют JavaScript?" ],
//   "111": [ "Что такое REST?" ],
//   "112": [ "Что такое AJAX?" ],
//   "113": [ "Какие мобильные платформы существуют?" ],
// "114": [
// "Какие версии Android и iOS используются на рынке (минимальные и максимальные)?"
// ],
// "115": [
// "Какие версии Android нужно тестировать, если заказчик сказал поддерживать с версии 5.0?"
// ],
// "116": [ "Назовите типы мобильных приложений." ],
// "117": [ "Каков формат файлов сборок приложений для Android и iOS?" ],
// "118": [ "Что такое ADB?" ],
// "119": [ "Как снять логи с AOS/IOS?" ],
// "120": [
// "Что нужно проверять при использовании сканера отпечатка/Face ID?"
// ],
// "121": [ "Как я могу запускать тесты Android без Appium?" ],
// "122": [ "Объясните концепцию дизайна Appium." ],
// "123": [
// "Вниамниеееее================================================================."
// ],
// "124": [ " " ],
// "125": [ "задания" ],
// "126": [ "Написать чеклист для функционала корзины в интернет-магазине." ],
// "127": [
// "Написать тестовые наборы данных для поля ввод…рое отсеивает пользователей в возрасте до 18 лет."
// ],
// "128": [
// "Написать чеклист тестирования формы ввода данных платежной карты."
// ],
// "129": [
// "Протестовать «предмет» относительно различных…. (Предмет - лифт, карандаш, калькулятор и т. д.)"
// ],
// "130": [
// "Есть Input поле, принимающее целые значения о…ary Values ​​Analysis и Equivalence Partitioning."
// ],
// "131": [
// "Есть веб-страница с полями: e-mail, password …ст-кейсов, которыми можно проверить эту страницу."
// ],
// "132": [
// "Привести примеры тест-кейсов для функционала,…ольких страницах проекта (например, поле поиска)."
// ],
// "133": [ "Как протестировать процесс оплаты в интернет-магазине?" ],
// "134": [ "Как протестировать сломанный тостер?" ],
// "135": [ "Объясните для 7-летнего ребенка, что такое база данных." ],
// "136": [
// "Определите необходимое количество функциональных тест-кейсов, чтобы проверить Log in форму."
// ],
// "137": [
// "Есть форма регистрации в веб-приложении с пол… кнопкой Register. Какие проверки нужно провести?"
// ],
// "138": [
// "Поле username должно быть обязательным, но он…е пример баг-репорта, созданного для этой ошибки."
// ],
// "139": [ "Как бы вы провели smoke-testing для приложения типа Telegram?" ],
// "140": [
// "Как будет выглядеть баг-репорт, если, к примеру, не работает электрический чайник?"
// ],
// "141": [
// "Есть таблица books с полями: name, price, pag…олее 10 единиц и количество страниц от 20 до 100."
// ],
// "142": [
// "У вас есть функционал калькулятора, который д…римените? Какие техники тест-дизайна используете?"
// ],
// "143": [ "Задание на работу с SQL." ],
// "144": [
// "Ваша компания разрабатывает программное обесп… белого ящика следует выбрать для этого и почему?"
// ],
// "145": [
// "Оздоровительная программа для сотрудников сов…дицинского страхования и имеет следующие правила:"
// ],
// "146": [
// "Используя технику классов эквивалентности, ск…ть, чтобы покрыть вышеупомянутые условия на 100%?"
// ],
// "147": [
// "Какое минимальное количество тестов необходимо для покрытия следующих условий автогражданки:"
// ],
// "148": [
// "Напишите сценарии автоматического тестировани… настройками и разместите ваше решение на GitHub."
// ]

// }
// let old = {}
// for (const key in k) {
//   if (Object.hasOwnProperty.call(k, key)) {
//     const element = k[key];
//     old[(+key+1)] = element
//   }
// }

// console.log(old);

// for (let i = 0; i < array.length; i++) {
//   const element = array[i];
  
// }

// ['Убедиться, что данные, которые отображаются на сай…это те же самые данные, что находятся на сервере.', 'Убедиться, что каждый столбец имеет ограничения вх…ышающие это ограничение, не должны приниматься). ', 'Убедиться, что в таблицы базы данных можно вводить граничные значения, полученные от клиента.', 'Проверить функциональность хранимых процедур БД (н…аметры, возвращаемые значения, синтаксис и т.д.).', 'Убедиться, что при внесении изменений в БД данные …я (создание,  удаление и редактирование записей).', 'Убедиться, что пользователь не узнает о том, что в…зе данных какая-либо ошибка (со стороны бекенда).', 'Проверить, что пользователь не может войти в базу данных без аутентификации.', 'Убедиться, что запросы в БД выполняются без каких-либо сбоев. ', 'Проверить, что все таблицы имеют корректный внешний/первичный ключ. ', 'Убедиться, что сервер базы данных может обрабатывать отрицательные числа.', 'Проверить время ответа сервера базы данных.', 'ВСЕ таблицы базы данных должны сопровождаться кратким описанием.', 'Проверить, что структура БД сопровождается специфи…е процедуры, индексы, типы данных, флаги и т.д.).', 'Проверить, что изменения, сделанные пользователем,…шел сбой, изменения должны быть проигнорированы).', 'Проверить, что клиент работает с необходимой ему б…енде взаимодействуют с несколькими базами данных)', 'Убедиться, что клиент не может изменять значения н…оторых стоит запрет на внесения нулевых значений)', 'Проверить, что если клиент и сервер расположены в …вых зонах, не возникает проблем с синхронизацией.']

// let ib = {
//   '0': 'Убедиться, что данные, которые отображаются на сайте, - это те же самые данные, что находятся на сервере.',
//   '1': 'Убедиться, что каждый столбец имеет ограничения входных значений (значения, превышающие это ограничение, не должны приниматься). ',
//   '2': 'Убедиться, что в таблицы базы данных можно вводить граничные значения, полученные от клиента.',
//   '3': 'Проверить функциональность хранимых процедур БД (название, параметры, возвращаемые значения, синтаксис и т.д.).',
//   '4': 'Убедиться, что при внесении изменений в БД данные в ней обновляются (создание,  удаление и редактирование записей).',
//   '5': 'Убедиться, что пользователь не узнает о том, что в базе данных какая-либо ошибка (со стороны бекенда).',
//   '6': 'Проверить, что пользователь не может войти в базу данных без аутентификации.',
//   '7': 'Убедиться, что запросы в БД выполняются без каких-либо сбоев. ',
//   '8': 'Проверить, что все таблицы имеют корректный внешний/первичный ключ. ',
//   '9': 'Убедиться, что сервер базы данных может обрабатывать отрицательные числа.',
//   '10': 'Проверить время ответа сервера базы данных.',
//   '11': 'ВСЕ таблицы базы данных должны сопровождаться кратким описанием.',
//   '12': 'Проверить, что структура БД сопровождается спецификацией (таблицы, колонки, хранимые процедуры, индексы, типы данных, флаги и т.д.).',
//   '13': 'Проверить, что изменения, сделанные пользователем, сохраняются только по завершении процесса (если в процессе работы произошел сбой, изменения должны быть проигнорированы).',
//   '14': 'Проверить, что клиент работает с необходимой ему базой данных (в большинстве случаев сайты на бекенде взаимодействуют с несколькими базами данных)',
//   '15': 'Убедиться, что клиент не может изменять значения на NULL (в таблицах, в которых стоит запрет на внесения нулевых значений)',
//   '16': 'Проверить, что если клиент и сервер расположены в разных часовых зонах, не возникает проблем с синхронизацией.'
// }
// let arr = []
// for (let i = 0; i < 16; i++) {
//   const element = ib[i+''];
//   // console.log(element.innerText)
//     arr.push(`_ ${i+1} ${element}`)
// }
// console.log(arr.join());















// let text = ` [
//   [
//     'Как вы преодолеете трудности из-за отсутствия надлежащей документации для тестирования?',
//     '',
//     'assets/voise/3qUs1.mp3'
//   ],
//   [
//     'Какой подход является наилучшим для старта QA в проекте?',
//     '',
//     'assets/voise/3qUs2.mp3'
//   ],
//   [
//     'Какие препятствия могут возникнуть в обеспечении качества для Agile Tester?',
//     '',
//     'assets/voise/3qUs3.mp3'
//   ],
//   [ 'Что такое Definition of Done?', '', 'assets/voise/3qUs4.mp3' ],
//   [
//     'Когда можно считать, что тестирование окончено?',
//     '',
//     'assets/voise/3qUs5.mp3'
//   ],
//   [
//     'Что такое RCA в тестировании? Нужно ли его проводить?',
//     '',
//     'assets/voise/3qUs6.mp3'
//   ],
//   [
//     'Какой подход вы используете для Test Cases Review?',
//     '',
//     'assets/voise/3qUs7.mp3'
//   ],
//   [
//     'Какие виды рисков существуют? Что такое Mitigation Plan?',
//     '',
//     'assets/voise/3qUs8.mp3'
//   ],
//   [
//     'На основе чего нужно составлять стратегию для проведения тестирования нагрузки?',
//     '',
//     'assets/voise/3qUs9.mp3'
//   ],
//   [
//     'Как часто следует ревьюировать тестовую документацию?',
//     '',
//     'assets/voise/3qUs10.mp3'
//   ],
//   [
//     'Как можно быстро сделать выборку необходимых проверок для смоук-тестирования?',
//     '',
//     'assets/voise/3qUs11.mp3'
//   ],
//   [
//     'Как запланировать загруженность команды тестировщиков?',
//     '',
//     'assets/voise/3qUs12.mp3'
//   ],
//   [
//     'Какую ценность несет анализ результатов тестирования команде и проекту в целом?',
//     '',
//     'assets/voise/3qUs13.mp3'
//   ],
//   [
//     'Как можно подкорректировать флоу разработки, чтобы получать более чистые результаты на выходе и уменьшить количество багов на проде?',
//     '',
//     'assets/voise/3qUs14.mp3'
//   ],
//   [
//     'Расскажите о метриках качества, которые вы применяли. Зачем они нужны?',
//     '',
//     'assets/voise/3qUs15.mp3'
//   ],
//   [
//     'Как провести эстимейт задачи? Каковы техники оценки объема тестирования существуют?',
//     '',
//     'assets/voise/3qUs16.mp3'
//   ],
//   [
//     'Как можно посчитать покрытие тестами функционала?',
//     '',
//     'assets/voise/3qUs17.mp3'
//   ],
//   [
//     'Какое оптимальное количество шагов в тестовом сценарии?',
//     '',
//     'assets/voise/3qUs18.mp3'
//   ],
//   [
//     'Как избежать появления регрессивных дефектов?',
//     '',
//     'assets/voise/3qUs19.mp3'
//   ],
//   [
//     'Что такое тестирование со смещением влево (Shift left testing)?',
//     '',
//     'assets/voise/3qUs20.mp3'
//   ],
//   [
//     'Как будете тестировать программу, если для продукта нет документации?',
//     '',
//     'assets/voise/3qUs21.mp3'
//   ],
//   [ 'В чем смысл юнит-тестов?', '', 'assets/voise/3qUs22.mp3' ],
//   [
//     'Какие минусы полной автоматизации тестирования?',
//     '',
//     'assets/voise/3qUs23.mp3'
//   ],
//   [ 'Что такое ROI и как его считать?', '', 'assets/voise/3qUs24.mp3' ],
//   [
//     'Что такое CI/CD? Какие плюсы и минусы этого подхода?',
//     '',
//     'assets/voise/3qUs25.mp3'
//   ],
//   [
//     'TOP OWASP: какие знаете уязвимости и методы защиты?',
//     '',
//     'assets/voise/3qUs26.mp3'
//   ],
//   [
//     'Что вы думаете по поводу BDD? Когда следует использовать, а когда будет только хуже? Если все же следует использовать, то для UI или API автоматизированного тестирования?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Что такое сокеты и как их тестировать, вручную и автоматизировано? Зачем их используют?',
//     '',
//     'assets/voise/3qUs28.mp3'
//   ],
//   [
//     'Когда следует делать стресс-тестирование на проектах? От чего отталкиваться, когда строите сценарий для такого тестирования? Что учесть при выборе инструмента?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Как проверить безопасность на веб-странице?',
//     '',
//     'assets/voise/3qUs30.mp3'
//   ],
//   [
//     'Расскажите об алгоритмах шифрования трафика.',
//     '',
//     'assets/voise/3qUs31.mp3'
//   ],
//   [ 'Что такое NIC?', '', 'assets/voise/3qUs32.mp3' ],
//   [ 'Для чего нужен протокол RTP?', '', 'assets/voise/3qUs33.mp3' ],
//   [
//     'Что, по вашему мнению, лучше – SIP или PRI?',
//     '',
//     'assets/voise/3qUs34.mp3'
//   ],
//   [ 'Что такое NAT?', '', 'assets/voise/3qUs35.mp3' ],
//   [
//     'Зачем нужно автоматизировать?  назовите плюсы и минусы автоматизации',
//     'Главная цель внедрения автоматизации бизнеса в работу компании – оптимизация деятельности, помогает свести к минимуму рутинные задачи. Это особенно важно для процессов, которые непосредственно влияют на достижение результата. Минимизирует человеческий фактор. Иногда ошибки, вызванные человеческим фактором, могут дорого стоить. _  Повторяемость – все написанные тесты всегда будут выполняться однообразно, то есть исключен «человеческий фактор» _  Преимущества автоматизации тестирования:_ _  Быстрое выполнение – автоматизированному скрипту не нужно сверяться с инструкциями и документациями, это сильно экономит время выполнения. _  Меньшие затраты на поддержку – когда автоматические скрипты уже написаны, на их поддержку и анализ результатов требуется, как правило, меньшее время чем на проведение того же объема тестирования вручную. _  Отчеты – автоматически рассылаемые и сохраняемые отчеты о результатах тестирования. _  Выполнение без вмешательства – во время выполнения тестов инженер-тестировщик может заниматься другими полезными делами, или тесты могут выполняться в нерабочее время (этот метод предпочтительнее, так как нагрузка на локальные сети ночью снижена). _   Недостатки автоматизации_ Повторяемость – все написанные тесты всегда будут выполняться однообразно. Это одновременно является и недостатком, так как тестировщик, выполняя тест вручную, может обратить внимание на некоторые детали и, проведя несколько дополнительных операций, найти дефект. Скрипт этого сделать не может. _Затраты на поддержку – несмотря на то, что в случае автоматизированных тестов они меньше, чем затраты на ручное тестирование того же функционала – они все же есть. Чем чаще изменяется приложение, тем они выше. _ Большие затраты на разработку – разработка автоматизированных тестов это сложный процесс, так как фактически идет разработка приложения, которое тестирует другое приложение. _ Стоимость инструмента для автоматизации – в случае если используется лицензионное ПО, его стоимость может быть достаточно высока. _ Пропуск мелких ошибок - автоматический скрипт может пропускать мелкие ошибки на проверку которых он не запрограммирован. Это могут быть неточности в позиционировании окон, ошибки в надписях, которые не проверяются, ошибки контролов и форм с которыми не осуществляется взаимодействие во время выполнения скрипта. ',
//     'assets/voise/3qUs36.mp3'
//   ],
//   [
//     'Сформулируйте негативные сценарии для POST-запроса, который создаёт нового пользователя.',
//     '',
//     'assets/voise/3qUs37.mp3'
//   ],
//   [
//     'Как вы регулируете конфликтные ситуации между QA и разработчиками?',
//     '',
//     'assets/voise/3qUs38.mp3'
//   ],
//   [
//     'Какое минимальное количество тест-кейсов необходимо, чтобы убедиться в корректной работе этой(на которой ты находишься) веб-страницы?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     ' Продайте мне тестирование как клиенту, не желающему его покупать. Кратко и структурированно опишите вашу работу на каждом из этапов разработки ПО, используя профессиональные термины (не лить воду).',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'У вас есть онлайн-калькулятор. Вы вводите 1+1 и получаете 3. Расскажите, как вы будете искать причину проблемы.',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Могут ли быть такие виды архитектур? Клиент -> сервер -> База данных  Чего может быть недостаточно для правильной работы архитектур?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Есть веб-страница с полями e-mail, password и кнопкой submit. Предположим, что после нажатия кнопки submit страница перезагружается и ранее введенные данные исчезают. Как проверить, что данные отправлены в базу данных?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Есть проект, на котором нет тестовой документации, но проекту уже год. Мануальным QA не хватает времени на тестирование, они очень устали, есть желание уволиться. Какое решение по команде можно принять? ',
//     '',
//     'assets/voise/samCh.mp3'
//   ]
// ]
// [
//   [
//     'Как вы преодолеете трудности из-за отсутствия надлежащей документации для тестирования?',
//     '',
//     'assets/voise/3qUs1.mp3'
//   ],
//   [
//     'Какой подход является наилучшим для старта QA в проекте?',
//     '',
//     'assets/voise/3qUs2.mp3'
//   ],
//   [
//     'Какие препятствия могут возникнуть в обеспечении качества для Agile Tester?',
//     '',
//     'assets/voise/3qUs3.mp3'
//   ],
//   [ 'Что такое Definition of Done?', '', 'assets/voise/3qUs4.mp3' ],
//   [
//     'Когда можно считать, что тестирование окончено?',
//     '',
//     'assets/voise/3qUs5.mp3'
//   ],
//   [
//     'Что такое RCA в тестировании? Нужно ли его проводить?',
//     '',
//     'assets/voise/3qUs6.mp3'
//   ],
//   [
//     'Какой подход вы используете для Test Cases Review?',
//     '',
//     'assets/voise/3qUs7.mp3'
//   ],
//   [
//     'Какие виды рисков существуют? Что такое Mitigation Plan?',
//     '',
//     'assets/voise/3qUs8.mp3'
//   ],
//   [
//     'На основе чего нужно составлять стратегию для проведения тестирования нагрузки?',
//     '',
//     'assets/voise/3qUs9.mp3'
//   ],
//   [
//     'Как часто следует ревьюировать тестовую документацию?',
//     '',
//     'assets/voise/3qUs10.mp3'
//   ],
//   [
//     'Как можно быстро сделать выборку необходимых проверок для смоук-тестирования?',
//     '',
//     'assets/voise/3qUs11.mp3'
//   ],
//   [
//     'Как запланировать загруженность команды тестировщиков?',
//     '',
//     'assets/voise/3qUs12.mp3'
//   ],
//   [
//     'Какую ценность несет анализ результатов тестирования команде и проекту в целом?',
//     '',
//     'assets/voise/3qUs13.mp3'
//   ],
//   [
//     'Как можно подкорректировать флоу разработки, чтобы получать более чистые результаты на выходе и уменьшить количество багов на проде?',
//     '',
//     'assets/voise/3qUs14.mp3'
//   ],
//   [
//     'Расскажите о метриках качества, которые вы применяли. Зачем они нужны?',
//     '',
//     'assets/voise/3qUs15.mp3'
//   ],
//   [
//     'Как провести эстимейт задачи? Каковы техники оценки объема тестирования существуют?',
//     '',
//     'assets/voise/3qUs16.mp3'
//   ],
//   [
//     'Как можно посчитать покрытие тестами функционала?',
//     '',
//     'assets/voise/3qUs17.mp3'
//   ],
//   [
//     'Какое оптимальное количество шагов в тестовом сценарии?',
//     '',
//     'assets/voise/3qUs18.mp3'
//   ],
//   [
//     'Как избежать появления регрессивных дефектов?',
//     '',
//     'assets/voise/3qUs19.mp3'
//   ],
//   [
//     'Что такое тестирование со смещением влево (Shift left testing)?',
//     '',
//     'assets/voise/3qUs20.mp3'
//   ],
//   [
//     'Как будете тестировать программу, если для продукта нет документации?',
//     '',
//     'assets/voise/3qUs21.mp3'
//   ],
//   [ 'В чем смысл юнит-тестов?', '', 'assets/voise/3qUs22.mp3' ],
//   [
//     'Какие минусы полной автоматизации тестирования?',
//     '',
//     'assets/voise/3qUs23.mp3'
//   ],
//   [ 'Что такое ROI и как его считать?', '', 'assets/voise/3qUs24.mp3' ],
//   [
//     'Что такое CI/CD? Какие плюсы и минусы этого подхода?',
//     '',
//     'assets/voise/3qUs25.mp3'
//   ],
//   [
//     'TOP OWASP: какие знаете уязвимости и методы защиты?',
//     '',
//     'assets/voise/3qUs26.mp3'
//   ],
//   [
//     'Что вы думаете по поводу BDD? Когда следует использовать, а когда будет только хуже? Если все же следует использовать, то для UI или API автоматизированного тестирования?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Что такое сокеты и как их тестировать, вручную и автоматизировано? Зачем их используют?',
//     '',
//     'assets/voise/3qUs28.mp3'
//   ],
//   [
//     'Когда следует делать стресс-тестирование на проектах? От чего отталкиваться, когда строите сценарий для такого тестирования? Что учесть при выборе инструмента?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Как проверить безопасность на веб-странице?',
//     '',
//     'assets/voise/3qUs30.mp3'
//   ],
//   [
//     'Расскажите об алгоритмах шифрования трафика.',
//     '',
//     'assets/voise/3qUs31.mp3'
//   ],
//   [ 'Что такое NIC?', '', 'assets/voise/3qUs32.mp3' ],
//   [ 'Для чего нужен протокол RTP?', '', 'assets/voise/3qUs33.mp3' ],
//   [
//     'Что, по вашему мнению, лучше – SIP или PRI?',
//     '',
//     'assets/voise/3qUs34.mp3'
//   ],
//   [ 'Что такое NAT?', '', 'assets/voise/3qUs35.mp3' ],
//   [
//     'Зачем нужно автоматизировать?  назовите плюсы и минусы автоматизации',
//     'Главная цель внедрения автоматизации бизнеса в работу компании – оптимизация деятельности, помогает свести к минимуму рутинные задачи. Это особенно важно для процессов, которые непосредственно влияют на достижение результата. Минимизирует человеческий фактор. Иногда ошибки, вызванные человеческим фактором, могут дорого стоить. _  Повторяемость – все написанные тесты всегда будут выполняться однообразно, то есть исключен «человеческий фактор» _  Преимущества автоматизации тестирования:_ _  Быстрое выполнение – автоматизированному скрипту не нужно сверяться с инструкциями и документациями, это сильно экономит время выполнения. _  Меньшие затраты на поддержку – когда автоматические скрипты уже написаны, на их поддержку и анализ результатов требуется, как правило, меньшее время чем на проведение того же объема тестирования вручную. _  Отчеты – автоматически рассылаемые и сохраняемые отчеты о результатах тестирования. _  Выполнение без вмешательства – во время выполнения тестов инженер-тестировщик может заниматься другими полезными делами, или тесты могут выполняться в нерабочее время (этот метод предпочтительнее, так как нагрузка на локальные сети ночью снижена). _   Недостатки автоматизации_ Повторяемость – все написанные тесты всегда будут выполняться однообразно. Это одновременно является и недостатком, так как тестировщик, выполняя тест вручную, может обратить внимание на некоторые детали и, проведя несколько дополнительных операций, найти дефект. Скрипт этого сделать не может. _Затраты на поддержку – несмотря на то, что в случае автоматизированных тестов они меньше, чем затраты на ручное тестирование того же функционала – они все же есть. Чем чаще изменяется приложение, тем они выше. _ Большие затраты на разработку – разработка автоматизированных тестов это сложный процесс, так как фактически идет разработка приложения, которое тестирует другое приложение. _ Стоимость инструмента для автоматизации – в случае если используется лицензионное ПО, его стоимость может быть достаточно высока. _ Пропуск мелких ошибок - автоматический скрипт может пропускать мелкие ошибки на проверку которых он не запрограммирован. Это могут быть неточности в позиционировании окон, ошибки в надписях, которые не проверяются, ошибки контролов и форм с которыми не осуществляется взаимодействие во время выполнения скрипта. ',
//     'assets/voise/3qUs36.mp3'
//   ],
//   [
//     'Сформулируйте негативные сценарии для POST-запроса, который создаёт нового пользователя.',
//     '',
//     'assets/voise/3qUs37.mp3'
//   ],
//   [
//     'Как вы регулируете конфликтные ситуации между QA и разработчиками?',
//     '',
//     'assets/voise/3qUs38.mp3'
//   ],
//   [
//     'Какое минимальное количество тест-кейсов необходимо, чтобы убедиться в корректной работе этой(на которой ты находишься) веб-страницы?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     ' Продайте мне тестирование как клиенту, не желающему его покупать. Кратко и структурированно опишите вашу работу на каждом из этапов разработки ПО, используя профессиональные термины (не лить воду).',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'У вас есть онлайн-калькулятор. Вы вводите 1+1 и получаете 3. Расскажите, как вы будете искать причину проблемы.',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Могут ли быть такие виды архитектур? Клиент -> сервер -> База данных  Чего может быть недостаточно для правильной работы архитектур?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Есть веб-страница с полями e-mail, password и кнопкой submit. Предположим, что после нажатия кнопки submit страница перезагружается и ранее введенные данные исчезают. Как проверить, что данные отправлены в базу данных?',
//     '',
//     'assets/voise/samCh.mp3'
//   ],
//   [
//     'Есть проект, на котором нет тестовой документации, но проекту уже год. Мануальным QA не хватает времени на тестирование, они очень устали, есть желание уволиться. Какое решение по команде можно принять? ',
//     '',
//     'assets/voise/samCh.mp3'
//   ]
// ]`

// console.log(matchSearch(text));


// function replaceAt(text, index, replacement) {
//   return text.substring(0, index) + replacement + text.substring(index + 1, +text.length);
// }

// function matchSearch(text) {
//   let p = text
//   for (let i = 0; i < p.length; i++) {
//     const element = p[i];
//     // console.log(element);
//     if (element === "'") {
//       p = replaceAt(p, i, '"')
//     }
//   }
//   return p
// }

















// const opla =   {
//   "1": [
//     "Как вы преодолеете трудности из-за отсутствия надлежащей документации для тестирования?",
//     "",
//     "assets/voise/3qUs1.mp3"
//   ],
//   "2": [
//     "Какой подход является наилучшим для старта QA в проекте?",
//     "",
//     "assets/voise/3qUs2.mp3"
//   ],
//   "3": [
//     "Какие препятствия могут возникнуть в обеспечении качества для Agile Tester?",
//     "",
//     "assets/voise/3qUs3.mp3"
//   ],
//   "4": [ "Что такое Definition of Done?", "", "assets/voise/3qUs4.mp3" ],
//   "5": [
//     "Когда можно считать, что тестирование окончено?",
//     "",
//     "assets/voise/3qUs5.mp3"
//   ],
//   "6": [
//     "Что такое RCA в тестировании? Нужно ли его проводить?",
//     "",
//     "assets/voise/3qUs6.mp3"
//   ],
//   "7": [
//     "Какой подход вы используете для Test Cases Review?",
//     "",
//     "assets/voise/3qUs7.mp3"
//   ],
//   "8": [
//     "Какие виды рисков существуют? Что такое Mitigation Plan?",
//     "",
//     "assets/voise/3qUs8.mp3"
//   ],
//   "9": [
//     "На основе чего нужно составлять стратегию для проведения тестирования нагрузки?",
//     "",
//     "assets/voise/3qUs9.mp3"
//   ],
//   "10": [
//     "Как часто следует ревьюировать тестовую документацию?",
//     "",
//     "assets/voise/3qUs10.mp3"
//   ],
//   "11": [
//     "Как можно быстро сделать выборку необходимых проверок для смоук-тестирования?",
//     "",
//     "assets/voise/3qUs11.mp3"
//   ],
//   "12": [
//     "Как запланировать загруженность команды тестировщиков?",
//     "",
//     "assets/voise/3qUs12.mp3"
//   ],
//   "13": [
//     "Какую ценность несет анализ результатов тестирования команде и проекту в целом?",
//     "",
//     "assets/voise/3qUs13.mp3"
//   ],
//   "14": [
//     "Как можно подкорректировать флоу разработки, чтобы получать более чистые результаты на выходе и уменьшить количество багов на проде?",
//     "",
//     "assets/voise/3qUs14.mp3"
//   ],
//   "15": [
//     "Расскажите о метриках качества, которые вы применяли. Зачем они нужны?",
//     "",
//     "assets/voise/3qUs15.mp3"
//   ],
//   "16": [
//     "Как провести эстимейт задачи? Каковы техники оценки объема тестирования существуют?",
//     "",
//     "assets/voise/3qUs16.mp3"
//   ],
//   "17": [
//     "Как можно посчитать покрытие тестами функционала?",
//     "",
//     "assets/voise/3qUs17.mp3"
//   ],
//   "18": [
//     "Какое оптимальное количество шагов в тестовом сценарии?",
//     "",
//     "assets/voise/3qUs18.mp3"
//   ],
//   "19": [
//     "Как избежать появления регрессивных дефектов?",
//     "",
//     "assets/voise/3qUs19.mp3"
//   ],
//   "20": [
//     "Что такое тестирование со смещением влево (Shift left testing)?",
//     "",
//     "assets/voise/3qUs20.mp3"
//   ],
//   "21": [
//     "Как будете тестировать программу, если для продукта нет документации?",
//     "",
//     "assets/voise/3qUs21.mp3"
//   ],
//   "22": [ "В чем смысл юнит-тестов?", "", "assets/voise/3qUs22.mp3" ],
//   "23": [
//     "Какие минусы полной автоматизации тестирования?",
//     "",
//     "assets/voise/3qUs23.mp3"
//   ],
//   "24": [ "Что такое ROI и как его считать?", "", "assets/voise/3qUs24.mp3" ],
//   "25": [
//     "Что такое CI/CD? Какие плюсы и минусы этого подхода?",
//     "",
//     "assets/voise/3qUs25.mp3"
//   ],
//   "26": [
//     "TOP OWASP: какие знаете уязвимости и методы защиты?",
//     "",
//     "assets/voise/3qUs26.mp3"
//   ],
//   "27": [
//     "Что вы думаете по поводу BDD? Когда следует использовать, а когда будет только хуже? Если все же следует использовать, то для UI или API автоматизированного тестирования?",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "28": [
//     "Что такое сокеты и как их тестировать, вручную и автоматизировано? Зачем их используют?",
//     "",
//     "assets/voise/3qUs28.mp3"
//   ],
//   "29": [
//     "Когда следует делать стресс-тестирование на проектах? От чего отталкиваться, когда строите сценарий для такого тестирования? Что учесть при выборе инструмента?",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "30": [
//     "Как проверить безопасность на веб-странице?",
//     "",
//     "assets/voise/3qUs30.mp3"
//   ],
//   "31": [
//     "Расскажите об алгоритмах шифрования трафика.",
//     "",
//     "assets/voise/3qUs31.mp3"
//   ],
//   "32": [ "Что такое NIC?", "", "assets/voise/3qUs32.mp3" ],
//   "33": [ "Для чего нужен протокол RTP?", "", "assets/voise/3qUs33.mp3" ],
//   "34": [
//     "Что, по вашему мнению, лучше – SIP или PRI?",
//     "",
//     "assets/voise/3qUs34.mp3"
//   ],
//   "35": [ "Что такое NAT?", "", "assets/voise/3qUs35.mp3" ],
//   "36": [
//     "Зачем нужно автоматизировать?  назовите плюсы и минусы автоматизации",
//     "Главная цель внедрения автоматизации бизнеса в работу компании – оптимизация деятельности, помогает свести к минимуму рутинные задачи. Это особенно важно для процессов, которые непосредственно влияют на достижение результата. Минимизирует человеческий фактор. Иногда ошибки, вызванные человеческим фактором, могут дорого стоить. _  Повторяемость – все написанные тесты всегда будут выполняться однообразно, то есть исключен «человеческий фактор» _  Преимущества автоматизации тестирования:_ _  Быстрое выполнение – автоматизированному скрипту не нужно сверяться с инструкциями и документациями, это сильно экономит время выполнения. _  Меньшие затраты на поддержку – когда автоматические скрипты уже написаны, на их поддержку и анализ результатов требуется, как правило, меньшее время чем на проведение того же объема тестирования вручную. _  Отчеты – автоматически рассылаемые и сохраняемые отчеты о результатах тестирования. _  Выполнение без вмешательства – во время выполнения тестов инженер-тестировщик может заниматься другими полезными делами, или тесты могут выполняться в нерабочее время (этот метод предпочтительнее, так как нагрузка на локальные сети ночью снижена). _   Недостатки автоматизации_ Повторяемость – все написанные тесты всегда будут выполняться однообразно. Это одновременно является и недостатком, так как тестировщик, выполняя тест вручную, может обратить внимание на некоторые детали и, проведя несколько дополнительных операций, найти дефект. Скрипт этого сделать не может. _Затраты на поддержку – несмотря на то, что в случае автоматизированных тестов они меньше, чем затраты на ручное тестирование того же функционала – они все же есть. Чем чаще изменяется приложение, тем они выше. _ Большие затраты на разработку – разработка автоматизированных тестов это сложный процесс, так как фактически идет разработка приложения, которое тестирует другое приложение. _ Стоимость инструмента для автоматизации – в случае если используется лицензионное ПО, его стоимость может быть достаточно высока. _ Пропуск мелких ошибок - автоматический скрипт может пропускать мелкие ошибки на проверку которых он не запрограммирован. Это могут быть неточности в позиционировании окон, ошибки в надписях, которые не проверяются, ошибки контролов и форм с которыми не осуществляется взаимодействие во время выполнения скрипта. ",
//     "assets/voise/3qUs36.mp3"
//   ],
//   "37": [
//     "Сформулируйте негативные сценарии для POST-запроса, который создаёт нового пользователя.",
//     "",
//     "assets/voise/3qUs37.mp3"
//   ],
//   "38": [
//     "Как вы регулируете конфликтные ситуации между QA и разработчиками?",
//     "",
//     "assets/voise/3qUs38.mp3"
//   ],
//   "39": [
//     "Какое минимальное количество тест-кейсов необходимо, чтобы убедиться в корректной работе этой(на которой ты находишься) веб-страницы?",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "40": [
//     " Продайте мне тестирование как клиенту, не желающему его покупать. Кратко и структурированно опишите вашу работу на каждом из этапов разработки ПО, используя профессиональные термины (не лить воду).",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "41": [
//     "У вас есть онлайн-калькулятор. Вы вводите 1+1 и получаете 3. Расскажите, как вы будете искать причину проблемы.",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "42": [
//     "Могут ли быть такие виды архитектур? Клиент -> сервер -> База данных  Чего может быть недостаточно для правильной работы архитектур?",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "43": [
//     "Есть веб-страница с полями e-mail, password и кнопкой submit. Предположим, что после нажатия кнопки submit страница перезагружается и ранее введенные данные исчезают. Как проверить, что данные отправлены в базу данных?",
//     "",
//     "assets/voise/samCh.mp3"
//   ],
//   "44": [
//     "Есть проект, на котором нет тестовой документации, но проекту уже год. Мануальным QA не хватает времени на тестирование, они очень устали, есть желание уволиться. Какое решение по команде можно принять? ",
//     "",
//     "assets/voise/samCh.mp3"
//   ]
// }
// const lort = Object.values(opla)
// console.log(lort);
// let arrNew = []
// // console.log(lort);

// for (let i = 0; i < lort.length; i++) {
//   const element = lort[i];
//   // console.log(element);
//   arrNew.push(element)
// }
// console.log(arrNew);